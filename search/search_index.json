{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>\\(CS2030_S\\)</p>"},{"location":"00-overview.html","title":"Unit 0: Overview","text":"<p>Learning Objectives</p> <p>After this unit, students should</p> <ul> <li>understand the aims of CS2030/S.</li> <li>understand how the key concepts covered in CS2030/S are related to each other.</li> </ul>"},{"location":"00-overview.html#what-is-this-module-about","title":"What is This Module About?","text":"<p>CS2030/S is designed for students who have gone through a typical basic programming module and have learned about problem-solving with simple programming constructs such as loops, conditions, and functions.  In a typical introductory programming module, such as CS1010 and its variants at NUS, students tend to write small programs (in the order of tens or hundreds of lines of code) to solve a programming homework problem, work alone on their code, and move on to solve the next problem once the homework is done.</p> <p>The first aim of CS2030/S is to change the students' mindset and to make them learn to write software that will continue to evolve as software requirements change and to write software that will be read and modified by other programmers (including their future selves).</p> <p>Quote</p> <p>\"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. Code for readability.\"</p> <p>John Woods.</p> <p>The second aim of CS2030/S is to level up the complexity of programs that the students write, from the order of hundreds of lines to thousands of lines.  CS2030/S bridges the students between writing toy programs to solve specific problems in CS1010 and writing larger real-world software in their later modules, such as CS2103 Software Engineering.</p> <p>A programming language is a medium in which programmers can express their intentions and construct software and thus is critical to supporting the aims above.  With the appropriate features and tools, one can tame the complexity of software, make the code written friendlier to other programmers, and easier to evolve.  The third aim of CS2030/S is thus to expand the students' minds on different ways one can construct software and the principles behind some of the programming language constructs.  In particular, CS2030/S focuses on objects, types, and functions, as three key constructs for building programmer-friendly software.  It covers both object-oriented and functional paradigms as two different approaches to constructing software, with a strong emphasis on type safety.</p> <p>The final aim of CS2030/S is to introduce students to programming language concepts and to bridge them from introductory programming to advanced modules such as programming language design and implementation.  Part of CS2030/S introduces students to the design decisions behind some of the constraints and the workings behind the programming language compilation and execution, giving them a glimpse inside the programming system that so far has been mostly treated as a black box in introductory modules.</p> <p>Priority</p> <p>When writing programs to solve problems, the general priority should be the following:</p> <ol> <li>Correctness: Can your program run and solve the problem correctly?</li> <li>Efficiency: Can your program solve the problem efficiently?</li> <li>Maintainability: Can your program be maintained and improved upon by multiple people?</li> </ol> <p>The priority in CS1010 is correctness.  CS2040/S teaches you about how to increase efficiency while CS2030/S focuses more on maintainability.  However, you should never sacrifice correctness.</p>"},{"location":"00-overview.html#the-choice-of-java","title":"The Choice of Java","text":"<p>We decided to use one programming language throughout the module.  This decision means that we need to pick a language that is strongly typed with static typing and supports both object-oriented and functional programming.  Considering multiple factors, we decided to choose Java for CS2030/S, for its popularity, syntax familiarity, and smoother transitions to later modules in the NUS computing curriculum.</p> <p>While Java is not the most elegant programming language when expressing programs in a functional style, we hope that students can still learn the principles of functional programming and apply them in other programming languages.  This choice is a trade-off between having to switch to a different language in the middle of a module.  </p>"},{"location":"00-overview.html#what-this-module-is-not-about","title":"What This Module is Not About","text":"<p>This is not a module on Java programming.  We will not comprehensively cover Java syntax and features, except those relevant to the concepts we teach.  In fact, we will avoid and even ban students from using certain Java features (such as <code>var</code>) for pedagogical purposes.</p> <p>This is not a module on software engineering either.  Software engineering is a broad discipline on its own and deserves another module.  Rather, this module is about the programming principles and constructs on top of which programmers can design better software.  To motivate the importance of these principles and constructs and see how they can be used, we will inevitably cover some of the software engineering design principles, such as Liskov Substitution Principle (the L in SOLID), Tell-Don't-Ask, Composition over Inheritance, etc.  However, we will not comprehensively cover object-oriented design or software design in general (e.g., we will not cover S, O, I, and D in SOLID).</p> <p>Finally, CS2030/S is not a module that focuses on computational efficiency.  We have CS2040/S for that.  In CS2030/S, although reducing computational cost still plays a role, this is not the only cost that matters.  CS2030/S is also concerned with the human cost of debugging or maintaining software.  In striving for simpler software that is easier to maintain and extend, we may have to sacrifice computational efficiency.</p>"},{"location":"00-overview.html#taming-complexity-in-software-development","title":"Taming Complexity in Software Development","text":"<p>An underlying theme of CS2030/S is taming complexity in software development.  There are objective metrics with which one can measure the complexity of software, but here, we will loosely define complexity as anything that increases the likelihood of bugs in a program.</p> <p>Let's start by considering a simplified view of what a software program is.  One can view a software program as a collection of data variables and instructions on how to modify these variables.  A program is generally written to meet a given requirement: given one or more input variables, the program should perform the computation to produce the output variables, in a way that meets the requirement.  Often, the program stores information in the intermediate variables while performing the computation.</p> <p>As a student who has gone through an introductory programming module such as CS1010 and its variants, you should be familiar with the view above, and you should have some experience writing a program to solve a given computational problem.  The programs you have written for these introductory modules are mostly small \"toy\" programs -- they consist of only a few hundred lines and tens of variables, at most.</p> <p>Software development in the real world, however, is far more complex than what you have experienced.  A software program rarely solves a well-defined computational problem only.  It often requires multiple components, such as user interface, data storage, and business rules, intricately interacting with each other to attain a set of functionalities.  </p> <p>As the requirement of the software becomes more complex, the number of variables that need to be kept track of increases; the logic of the computation the programmer needs to maintain the variables becomes more complicated.  Further, it is often that the variables are interdependent.  For instance, updating a variable might require updating another; how a variable should be updated might depend on another variable.  As the number of variables increases, so is the number of relationships between the variables that the programmer has to keep track of.  Failure to correctly maintain the variables and the relationship between them most likely will lead to bugs.</p> <p>Further, real-world software rarely remains static.  This property is again different from what you have experienced in your introductory programming module, where once the instructors release a programming assignment, they rarely go back and change the requirements.  In the real world, software evolves -- new features are added, business rules change, and better algorithms are deployed.  The code needs to be updated accordingly -- adding new variables and new computation; changing how variables are updated or are dependent on each other.  Updating the code of an already-complex software program to keep up with the requirement, if not managed properly, can lead to bugs.</p> <p>Real-world software is often the product of teamwork from multiple programmers, where the software development process is unlike what you have experienced in your introductory programming module, where you solve your homework individually.  When multiple programmers work together, the interdependency between the states needs to be communicated and handled properly and consistently across the programmers.  One programmer's modification to the code should not introduce bugs into another programmer's code.  </p> <p>Since software evolves, the notion of \"multiple programmers\" actually applies even to software developed by a single lone programmer across time.  Changing one's code should not introduce new bugs to other parts of the code that were written some time ago.  </p>"},{"location":"00-overview.html#strategies-to-tame-complexity","title":"Strategies to Tame Complexity","text":""},{"location":"00-overview.html#good-software-development-practices","title":"Good Software Development Practices","text":"<p>If you are taught properly in your introductory programming modules, you should already be familiar with good programming practices that help to tame the complexity and reduce the chances of bugs.  These practices include</p> <ul> <li> <p>Commenting your code: Commenting your code provides in situ communication between you and other programmers on the team, as well as between you and your future self, on the non-obvious purpose of the states and the relationships between the states.  Such comments help to enhance the understanding of what the code is doing and to remind whoever is updating to code to modify appropriately when the requirement changes.</p> </li> <li> <p>Using a coding convention: Adhering to a coding convention helps improve code readability, reducing the cognitive barrier when one programmer reads another programmer's code and allowing the reader to understand the code more easily and thoroughly.</p> </li> </ul> <p>CS2030/S will continue to enforce these good programming practices.</p>"},{"location":"00-overview.html#functions","title":"Functions","text":"<p>You should also be taught to always break your code down into functions, each one performing a simple, specific, task.  The functions can then be composed to solve larger and more complex tasks.  Functions are an important programming structure in taming code complexity. They allow programmers to</p> <ol> <li>compartmentalize computation and its effects, reducing the number of interactions to a few well-defined ones (through arguments and return values);</li> <li>hide the implementation details so that they can be changed later without affecting other parts of the code; and</li> <li>reuse computations and thus write code that is more succinct and easier to understand/change.</li> </ol> <p>In CS2030/S, you will not only continue to break your computation into functions, but we will kick it up several notches.  A major part of CS2030/S is to introduce you to more programming paradigms and language tools that allow you to compartmentalize computations, hide details, and reduce repetition.</p>"},{"location":"00-overview.html#the-abstraction-principle","title":"The Abstraction Principle","text":"<p>The last point above about why it is important to code in small, reusable functions, follows what is called the Abstraction Principle<sup>1</sup>.  The principle states that:</p> <p>\"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\"</p> <p>This principle is something that we will visit over and over again in CS2030/S, applying it to different varying parts of a program. In the case of functions, the \"varying parts\" are the values on which we wish to perform the computation.  We will also apply this principle to</p> <ol> <li>types, abstracting them out as parameterized types or subtypes; and</li> <li>sub-computation, abstracting them out as first-class functions.</li> </ol> <p>These concepts: generics, subtypes, and first-class functions, underly most of the content of CS2030/S.</p>"},{"location":"00-overview.html#erecting-an-abstraction-barrier","title":"Erecting an Abstraction Barrier","text":"<p>Another important strategy for taming complexity is the abstraction barrier.  Let's separate the role of a programmer into two, in the context of writing functions: the implementer, who implements the function, and the client, who calls the function.  The implementer should compartmentalize the internal variables and the implementation of the function, hiding them behind the abstraction barrier.  The parameters and the return values are the only communication gateways across the barrier.  </p> <p>The abstraction barrier is something that we will refer to repeatedly in CS2030/S as well.  We will see how we maintain this barrier not only in the context of functions but also variables and computations on these variables together, by encapsulating them as objects and hiding details from the client through access modifiers.  These ideas form two of the core principles of object-oriented programming: encapsulation and abstraction.  </p>"},{"location":"00-overview.html#code-for-change","title":"Code for Change","text":"<p>The abstraction barrier, if erected and maintained properly, reduces code complexity.  It, however, also reduces flexibility as the software evolves.  If the client wishes to modify the computation protected by the abstraction barrier, it will need the help of the implementer.  In CS2030/S, we will see two ways we can modify the computation behind the abstraction barrier, without changing the code behind the barrier.  </p> <p>First, we will introduce the concepts of inheritance and polymorphism, the other two core principles of object-oriented programming.  These object-oriented mechanisms allow programmers to easily extend or modify the behavior of existing code.  </p> <p>Second, we will introduce closure, an abstraction to computation and its environment, that we can pass into the functions behind the abstraction barrier to perform a computation.  The second idea, if carried to the extreme in terms of flexibility, leads to the concept of monad in the functional programming paradigm.  A monad is a computational structure that allows objects to be composed and manipulated in a succinct and powerful way.</p>"},{"location":"00-overview.html#types","title":"Types","text":"<p>Allowing a programmer to change the behavior of the existing code without changing the code could lead to more bugs, if not managed properly.  To prevent this, both the programming language system and the programmers, have to adhere to certain rules when extending or modifying the behavior of the existing code.  Java and many other typed languages have type systems -- a set of rules that governs how variables, expressions, and functions interact with each other.  You will learn about subtyping and the Liskov Substitution Principle, two notions that are important to constraining how inheritance and polymorphism should be used to avoid bugs.</p> <p>A type system is also an important tool to reduce the complexity of software development.  Constraining the interactions among the variables, expressions, and functions, reduces the possible interdependence between these programming constructs.  Furthermore, any attempt by programmers to break the constraint can be caught automatically by the compiler.  By utilizing the type system properly, we can detect potential bugs before they manifest themselves.</p> <p>A reason CS2030/S chooses to use Java is due to its type system.  CS2030/S will introduce the concept of types, subtypes, compile-time vs. run-time types, variants of types, parameterized types, and type inferences, in the context of Java.  We will see how we can define our own types (using classes and interfaces) and define relationships between them.  We will see how we can define parameterized types and generic functions that take in types as parameters.  These concepts apply to many other programming languages.</p>"},{"location":"00-overview.html#eliminating-side-effects","title":"Eliminating Side Effects","text":"<p>We have discussed how functions can compartmentalize computations and limit their complexity within their body.  For this approach to be effective, the function must not have any side effects -- such as updating a variable that is not within the function.  Such functions is called pure _functions.  Being side-effect-free is one of the key principles of the functional programming paradigm and is something that we will explore to kick off the section on functional paradigm in CS2030/S.</p> <p>A related idea in object-oriented programming we will cover in CS2030/S is immutability -- once we create an object, the object cannot be changed.  In order to update an object, we need to create a new one.  With immutability and pure functions, we can guarantee that the same function invoked on the same objects will always return the same value.  This certainty can help in understanding and reasoning about the code behavior.</p> <ol> <li> <p>This principle is formulated by Benjamin C. Pierce in his book \"Types and Programming Languages.\"\u00a0\u21a9</p> </li> </ol>"},{"location":"01-compiler.html","title":"Unit 1: Program and Compiler","text":"<p>Learning Objectives</p> <p>After this unit, students should</p> <ul> <li>recap some fundamental programming concepts, including the concept of a program, a programming language, a compiler, and an interpreter.</li> <li>be aware of two modes of running a Java program (compiled vs. interpreted).</li> <li>be aware that compile-time errors are better than run-time errors, but the compiler cannot always detect errors during compile time.</li> </ul>"},{"location":"01-compiler.html#software-program","title":"Software Program","text":"<p>A software program is a collection of data variables and instructions on how to modify these variables.  To dictate these instructions to the computer, programmers usually write down the instructions using a programming language, expressing their instructions in code that is made up of keywords, symbols, and names.  </p> <p>A programming language is a formal language that helps programmers specify precisely what the instructions are at a higher level of abstraction (i.e., at a higher conceptual level) so that a programmer only needs to write a few lines of code to give complex instructions to the computer.  </p>"},{"location":"01-compiler.html#compiled-vs-interpreted-programs","title":"Compiled vs. Interpreted Programs","text":"<p>The processing unit of a computer can only accept and understand instructions written in machine code.  A program, written in a higher-level programming language, therefore needs to be translated into machine code before execution.  There are different approaches to how such translations can be done.  The first approach uses a compiler -- a software tool that reads the entire program written in a higher-level programming language and translates it into machine code.  The machine code is then saved into an executable file, which can be executed later.  <code>clang</code>, a C/C++ compiler, is an example.  The second approach uses an interpreter -- software that reads in the program one statement at a time interprets what the statement means, and executes it directly.   This is how Python and Javascript programs are executed. </p> <p>Modern programming systems for executing programs are, however, more sophisticated.  V8, for instance, is an open-source engine that executes Javascript, and it contains both an interpreter that first interprets a Javascript program into bytecode (an intermediate, low-level representation) and its execution engine. A just-in-time compiler then reads in the bytecode and generates machine code dynamically at runtime with optimized performance. </p> <p>Java programs, on the other hand, can be executed in two ways:</p> <ol> <li>The Java program can first be compiled into bytecode.  During execution, the bytecode is interpreted and compiled on the fly by the Java Virtual Machine (JVM) into machine code.</li> <li>The Java program can be interpreted by the Java interpreter.</li> </ol> <p>To better understand this distinction, we will introduce a visual aid to describe the relationships between programs, compilers, interpreters, and machines.</p>"},{"location":"01-compiler.html#tombstone-diagrams-t-diagrams","title":"Tombstone Diagrams (T-Diagrams)","text":"<p>Tombstone Diagrams or T-diagrams consist of combinations of the following four components: </p> <ul> <li>Programs which are implemented in a particular language (i.e., <code>Java</code>, <code>Python</code>, <code>C/C++</code>)</li> <li>Language A Interpreters implemented in language B</li> <li>Language A to language B Compilers which are implemented in a language C</li> <li>Physical Machines implementing a particular language (i.e., x86-64, ARM-64)</li> </ul> <p>These components are represented in T-diagrams as shown in the figure below:</p> <p></p> <p>We can treat these components like \"puzzle pieces\" and build diagrams to describe various execution, compilation, or interpreted processes.  For example, in the diagram below, a Python script <code>Hello.py</code> is being interpreted by the Python interpreter running on the x86-64 architecture.</p> <p></p> <p>Note: In order for the diagram to be valid, adjacent connected diagram components need to match. This can be seen in the diagram below (highlighted with blue boxes).</p> <p></p> <p>Since CS2030/S uses Java, we will now look at the two approaches to execute a Java program in more detail (without worrying about how to write a single line of Java first).</p>"},{"location":"01-compiler.html#compiling-and-running-java-programs","title":"Compiling and Running Java Programs","text":"<p>Suppose we have a Java program called <code>Hello.java</code>.  To compile the program, we type<sup>1</sup></p> <pre><code>$ javac Hello.java\n</code></pre> <p>into the command line.  <code>javac</code> is the Java compiler.  This step will either lead to the bytecode called <code>Hello.class</code> being created or generate some errors.  This process can be seen in the figure below, where the <code>Hello.java</code> program is compiled from Java to the JVM language (bytecode). The Java compiler <code>javac</code> in this diagram is implemented in the x86-64 machine language.</p> <p></p> <p>Assuming that there is no error in compilation, we can now run</p> <pre><code>$ java Hello\n</code></pre> <p>to invoke the JVM <code>java</code> and execute the bytecode contained in the file <code>Hello.class</code>. This can be seen in the figure below, where the <code>Hello.class</code> program is interpreted from JVM language (bytecode) to the x86-64 machine language.</p> <p></p> <p>Beginners tend to confuse between <code>javac</code> and <code>java</code>, and whether to add the extension <code>.java</code> or <code>.class</code> when compiling and executing a Java program.  Do take note and refer back here if needed<sup>2</sup>.</p> <p>Common Mistakes</p> <p>A common mistake when compiling and running a Java program is to use the <code>java</code> command on a <code>.java</code> file instead of the <code>javac</code> command. To make matters worse, you can sometimes run the <code>.java</code> program using the <code>java</code> command seemingly bypassing the need for compilation using the <code>javac</code> command. This feature is called \"Launch Single-File Source-Code Programs\". In general, avoid the following command:</p> <pre><code>$ java Hello.java\n</code></pre>"},{"location":"01-compiler.html#interpreting-a-java-program","title":"Interpreting a Java program","text":"<p>Java (version 8 or later) comes with an interpreter called <code>jshell</code> that can read Java statements, evaluate them, and print the results<sup>3</sup>. <code>jshell</code> is useful for learning and experimenting with Java.   This can be seen in the figure below, where the <code>Hello.java</code> program is interpreted from Java directly to the x86-64 machine language. </p> <p></p> <p>To run <code>jshell</code> in interactive mode, we type</p> <pre><code>$ jshell\n</code></pre> <p>on the command line, which causes an interactive prompt to appear:</p> <pre><code>$ jshell\n|  Welcome to JShell -- Version 17\n|  For an introduction type: /help intro\n\njshell&gt;\n</code></pre> <p>We can now type in Java code on <code>jshell&gt;</code>. </p> <p>Alternatively, we can also include all the Java statements that we want <code>jshell</code> to run in a file and pass it into jshell</p> <pre><code>$ jshell Hello.jsh\n</code></pre> <p>While <code>jshell</code> is a convenient way to test things out and play with new Java concepts as we learn, do keep in mind that <code>jshell</code> combines both compilation and run-time into a single step.  The error spewed out by <code>jshell</code> could be either a compile-time error or a run-time error, and this could be confusing to beginners who try to distinguish between the two phases of program execution.</p> <p>jsh vs java</p> <p>Files intended to be run on <code>jshell</code> typically uses <code>.jsh</code> extension while files intended to be compiled and run use <code>.java</code> extension.  However, this difference is merely a convention.  You can still interpret <code>.java</code> program on <code>jshell</code>.</p>"},{"location":"01-compiler.html#compiler","title":"Compiler","text":"<p>Quote</p> <p>\"One man's program is another program's data.\"</p> <p>Olivier Danvy</p> <p>The compiler does more than just translate source code into machine code or bytecode.  The compiler also needs to parse the source code written and check if it follows the precise specification of the programming language (called grammar) used, and produces a syntax error if the grammar is violated.  It therefore can detect any syntax error before the program is run.</p> <p>It is much better for a programmer to detect any error in its code during compilation -- since this is the phase when the program is still being developed and under the control of the programmer.  Runtime error, on the other hand, might occur when the customers are running the program, and so are much less desirable.  As such, we try to detect errors as much as possible during compilation.  The compiler is a powerful friend for any programmer if used properly.</p> <p>The power of the compiler, however, is limited.  A compiler can only read and analyze the source code without actually running it.  Without running the program, the compiler cannot always tell if a particular statement in the source code will ever be executed; it cannot always tell what values a variable will take.</p> <p>To deal with this, the compiler can either be conservative, and report an error as long as there is a possibility that a particular statement is incorrect; or, the compiler can be more permissive, reporting an error only if there _is no _possibility that a particular statement is correct.  If there is a possibility that a particular statement is correct, it does not throw an error but relies on the programmer to do the right thing.  We will further contrast these two behaviors later in this module.</p> <ol> <li> <p>The <code>$</code> represents the command prompt in a shell and you do not need to type this.\u00a0\u21a9</p> </li> <li> <p>To add to the confusion, Java 11 introduces a shortcut where we can run <code>java Hello.java</code> directly.  This command causes <code>Hello.java</code> to be compiled and executed in a single step.  We won't do this in CS2030/S (i) to avoid confusion and (ii) to show you the steps explicitly.\u00a0\u21a9</p> </li> <li> <p>Such a program is called REPL (Read-Evaluate-Print in a Loop) for short.\u00a0\u21a9</p> </li> </ol>"},{"location":"02-type.html","title":"Unit 2: Variable and Type","text":"<p>Learning Objectives</p> <p>After this unit, students should</p> <ul> <li>appreciate the concept of variables as an abstraction</li> <li>understand the concept of types and subtypes</li> <li>contrast between statically typed language vs. dynamically typed language</li> <li>contrast between strongly typed language vs. weakly typed language</li> <li>be familiar with Java variables and primitive types</li> <li>understand widening type conversion in the context of variable assignments and how subtyping dictates whether the type conversion is allowed.</li> </ul>"},{"location":"02-type.html#data-abstraction-variable","title":"Data Abstraction: Variable","text":"<p>One of the important abstractions that are provided by a programming language is the variable.  Data are stored in some location in computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like <code>0xFA49130E</code> is not user-friendly; Second, the location may change.  A variable is an abstraction that allows us to give a user-friendly name to a piece of data in memory.  We use the variable name whenever we want to access the value in that location, and a pointer to the variable_ or reference to the variable whenever we want to refer to the address of the location.</p> <p></p>"},{"location":"02-type.html#type","title":"Type","text":"<p>As programs get more complex, the number of variables that the programmer needs to keep track of increases.  These variables might be an abstraction over different types of data: some variables might refer to a number, some to a string, some to a list of numbers, etc.  Not all operations are meaningful over all types of data.</p> <p>To help mitigate the complexity,  we can assign a type to a variable.  The type communicates to the readers what data type the variable is an abstraction over, and to the compiler/interpreter what operations are valid on this variable and how the operation behaves.  In lower-level programming languages like C, the type also informs the compiler how the bit representing the variable should be interpreted.</p> <p>As an example of how types can affect how an operation behaves, let's consider Python.  Suppose we have two variables <code>x</code> and <code>y</code>, storing the values <code>4</code> and <code>5</code> respectively and we run <code>print(x + y)</code>.</p> <ul> <li>If <code>x</code> and <code>y</code> are both strings, the output is <code>45</code>.</li> <li>If <code>x</code> and <code>y</code> are both integers, the output is <code>9</code>.</li> <li>If <code>x</code> is an integer and <code>y</code> is a string (or vice versa), you would get an error.</li> </ul> <p>In the last instance above, you see that assigning a type to each variable helps to keep the program meaningful, as the operation <code>+</code> is not defined over an integer and a string in Python.</p> <p>Java and Javascript, however,  would happily convert <code>4</code> into a string for you, and return <code>45</code>.</p>"},{"location":"02-type.html#dynamic-vs-static-type","title":"Dynamic vs. Static Type","text":"<p>Python and Javascript are examples of dynamically typed programming languages.  The same variable can hold values of different unrelated types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the values, and the type of the variable changes depending on the value it holds.  For example, we can do the following:</p> JavascriptPython <pre><code>let i = 4;   // i is an integer\ni = \"5\";     // ok, i is now a string\n</code></pre> <pre><code>i = 4        // i is an integer\ni = \"5\"      // ok, i is now a string\n</code></pre> <p>Java, on the other hand, is a statically typed language.  We need to declare every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type <code>int</code>.  Once a variable is declared with a particular, the type of the variable cannot be changed.  In other words, the variable can only hold values of that declared type.</p> <pre><code>int i;   // declare a variable of type int\ni = 4;   // ok because 4 is of type int\ni = \"5\"; // error, cannot assign a string to an `int`\n</code></pre> <p>The type that a variable is assigned when we declare the variable is also known as the compile-time type.  During the compilation, this is the only type that the compiler is aware of.  The compiler will check if the compile-time type matches when it parses the variables, expressions, values, and function calls, and throw an error if there is a type mismatch.  This type-checking step helps to catch errors in the code early.</p> <p>Types on Variable</p> <p>An important distinction between dynamic and static type is where the type gets attached to.  In static typing, the type is attached to the variable such that the variable can only store values of that particular type (or its subtype as you will see later).  In fact, in Java, the type that is attached to a variable is the declared type (i,e., the type written in the variable declaration also commonly known as compile-time type).</p> <p>On the other hand, in a dynamically typed language, the type is attached to the value.  In other words, a variable can store anything but we can know what the type is because the type can be queried from the value.</p>"},{"location":"02-type.html#strong-typing-vs-weak-typing","title":"Strong Typing vs. Weak Typing","text":"<p>A type system of a programming language is a set of rules that governs how the types can interact with each other.  </p> <p>A programming language can be strongly typed or weakly typed.  There are no formal definitions of \"strong\" vs. \"weak\" typing of a programming language, and there is a spectrum of \"strength\" between the typing discipline of a language.  </p> <p>Generally, a strongly typed programming language enforces strict rules in its type system, to ensure type safety, i.e., to ensure that if there are any problems with the program, it is not due to the type.  For instance, catching an attempt at multiplying two strings.  One way to ensure type safety is to catch type errors during compile time rather than leaving it to runtime.</p> <p>On the other hand, a weakly typed (or loosely typed) programming language is more permissive in terms of typing checking.  C is an example of a static, weakly typed language.  In C, the following is possible:</p> <pre><code>int i;        // declare a variable of type int\ni = 4;        // ok because 4 is of type int\ni = (int)\"5\"; // you want to treat a string as an int? ok, as you wish!   \n</code></pre> <p>The last line forces the C compiler to treat the string (to be more precise, the address of the string) as an integer, through typecasting.</p> <p>In contrast, if we try the following in Java:</p> <pre><code>int i;        // declare a variable of type int\ni = 4;        // ok because 4 is of type int\ni = (int)\"5\"; // error\n</code></pre> <p>we will get the following compile-time error message:</p> <pre><code>|  incompatible types: java.lang.String cannot be converted to int\n</code></pre> <p>because the compiler enforces a stricter rule and allows typecasting only if it makes sense.  More specifically, we will get a compilation error if the compiler can determine with certainty that such conversion can never happen successfully.</p>"},{"location":"02-type.html#type-checking-with-a-compiler","title":"Type Checking with A Compiler","text":"<p>In addition to checking for syntax errors, the compiler can check for type compilability according to the compile-time type, to catch possible errors as early as possible.  Such type-checking is made possible with static typing.  Consider the following Python program:</p> <pre><code>i = 0\nwhile (i &lt; 10):\n  # do something that takes a long time\n  i = i + 1\nprint(\"i is \" + i)\n</code></pre> <p>Since Python does not allow adding a string to an integer, there is a type mismatch error on Line 5.  The type mismatch error is only caught when Line 5 is executed after the program is run for a long time.  Since the type of the variable <code>i</code> can change during run time, Python (and generally, dynamically typed languages) cannot tell if Line 5 will lead to an error until it is evaluated during run time.  </p> <p>In contrast, statically typed language like Java can detect type mismatch during compile time since the compile-time type of a variable is fixed.  As you will see later, Java allows \"addition\" or string and integer, and but multiplication of a string and an integer.  If we have the following code, Java can confidently produce compilation errors without even running a program: </p> <pre><code>int i = 0\nwhile (i &lt; 10) {\n  // do something that takes a long time\n  i = i + 1;\n}\nString s = \"i is \" * i;\n</code></pre>"},{"location":"02-type.html#primitive-types-in-java","title":"Primitive Types in Java","text":"<p>We now switch our focus to Java, particularly to the types supported.  There are two categories of types in Java, the primitive types and the reference types.  We will first look at primitive types in this unit.</p> <p>Primitive types are types that hold numeric values (integers, floating-point numbers) as well as boolean values (<code>true</code> and <code>false</code>).  </p> <p>For storing integral values, Java provides four types, <code>byte</code>, <code>short</code>, <code>int</code>, and <code>long</code>, for storing 8-bit, 16-bit, 32-bit, and 64-bit signed integers respectively.  The type <code>char</code> stores 16-bit unsigned integers representing UTF-16 Unicode characters.</p> <p>For storing floating-point values, Java provides two types, <code>float</code> and <code>double</code>, for 32-bit and 64-bit floating-point numbers.</p> <p>Unlike reference types, which we will see later, primitive type variables never share their value with each other, i.e., if we have: <pre><code>int i = 1000;\nint j = i;\ni = i + 1;\n</code></pre></p> <p><code>i</code> and <code>j</code> each store a copy of the value <code>1000</code> after Line 2.  Changing <code>i</code> on Line 3 does not change the content of <code>j</code>.</p> Kinds Types Sizes Boolean <ul><li><code>boolean</code></li></ul> <ul><li>1-bit</li></ul> Character <ul><li><code>char</code></li></ul> <ul><li>16-bit</li></ul> Integral <ul><li><code>byte</code></li><li><code>short</code></li><li><code>int</code></li><li><code>long</code></li></ul> <ul><li>8-bit</li><li>16-bit</li><li>32-bit</li><li>64-bit</li></ul> Floating-Point <ul><li><code>float</code></li><li><code>double</code></li></ul> <ul><li>32-bit</li><li>64-bit</li></ul> <p>Long and Float Constant</p> <p>To differentiate between a <code>long</code> and an <code>int</code> constant, you can use the suffix <code>L</code> to denote that the value is expected to be of <code>long</code> type.  This is important for large values beyond the range of <code>int</code>.  On the other hand, if the constant is a floating-point constant, by default it is treated as type <code>double</code>.  You need to add the suffix <code>f</code> to indicate that the value is to be treated as a <code>float</code> type.</p>"},{"location":"02-type.html#subtypes","title":"Subtypes","text":"<p>An important concept that we will visit repeatedly in CS2030/S is the concept of subtypes.</p> <p>Subtype</p> <p>Let \\(S\\) and \\(T\\) be two types.  We say that \\(T\\) is a subtype of \\(S\\) if a piece of code written for variables of type \\(S\\) can also safely be used on variables of type \\(T\\).  </p> <p>We use the notation \\(T &lt;: S\\) or \\(S :&gt; T\\) to denote that \\(T\\) is a subtype of \\(S\\).  The subtyping relationship in general must satisfy two properties:</p> <ol> <li>Reflexive: For any type \\(S\\), we have \\(S &lt;: S\\) (i.e., \\(S\\) is a subtype of itself).</li> <li>Transitive: If \\(S &lt;: T\\) and \\(T &lt;: U\\), then \\(S &lt;: U\\).  In other words, if \\(S\\) is a subtype of \\(T\\) and \\(T\\) is a subtype of \\(U\\), then \\(S\\) is a subtype of \\(U\\).</li> </ol> <p>Additionally, in Java, you will find that the subtyping relationship also satisfies anti-symmetry.  However, this is often omitted as it is enforced by design.</p> <ul> <li>Anti-Symmetry: If \\(S &lt;: T\\) and \\(T &lt;: S\\), then \\(S\\) must be the same type as \\(T\\).</li> </ul> <p>We also use the term supertype to denote the reversed relationship: if \\(T\\) is a subtype of \\(S\\), then \\(S\\) is a supertype of \\(T\\).</p>"},{"location":"02-type.html#subtyping-between-java-primitive-types","title":"Subtyping Between Java Primitive Types","text":"<p>Considering the range of values that the primitive types can take, Java defines the following subtyping relationship:</p> <ul> <li><code>byte</code> &lt;: <code>short</code> &lt;: <code>int</code> &lt;: <code>long</code> &lt;: <code>float</code> &lt;: <code>double</code></li> <li><code>char</code> &lt;: <code>int</code></li> </ul> <p>Graphically, we can draw the subtyping relationship as an arrow from subtype to supertype.  In the case of Java primitive types, we can visualise the subtyping relationship as follows:</p> <p></p> <p>Long \\(&lt;:\\) Float?</p> <p>Why is <code>long</code> a subtype of <code>float</code>?  More specifically, <code>long</code> is 64-bit and <code>float</code> is only 32-bit.  Clearly, there are more values in <code>long</code> than in <code>float</code>!</p> <p>The resolution lies in the precision.  While it is indeed true that any (mathematical) integer can be converted into a (mathematical) real number by simply appending <code>.0</code> to the end, some <code>long</code> values cannot be represented precisely as <code>float</code>.  Try the following and see what is printed.</p> <pre><code>long l = 123456789L;\nfloat f = l;\nSystem.out.println(l);\nSystem.out.println(f);\n</code></pre> <p>Given this, let us go back to the definition of subtype above and try to apply the definition to the code below that is written for variables of type <code>double</code>.</p> Written for DoubleUsed for IntegerCommon Mistakes <pre><code>double x = 5.0;    // the type S is double\n// code below is written assuming S = double\ndouble y = x + x;\n</code></pre> <pre><code>int x = 5;         // the type S is now int\n// code below is written assuming S = double\ndouble y = x + x;  // still works! \n</code></pre> <pre><code>double x = 5.0;    // the type S is double\n// code below is written assuming S = int\nint y = x + x;     // oh no! it does not work!\n</code></pre> <p>Valid subtype relationship is part of what the Java compiler checks for when it compiles.  Consider the following example:</p> CodeWhat Compiler Sees <pre><code>double d = 5.0;\nint i = 5;\nd = i;\ni = d; // error\n</code></pre> <pre><code>double d = 5.0;  // d::double &lt;- 5.0::double\nint i = 5;       // i::int    &lt;- 5::int\nd = i;           // d::double &lt;- i::int (ok because int &lt;: double)\ni = d;           // i::int    &lt;- d::double (error because double &lt;/: int)\n</code></pre> <p>Line 4 above would lead to an error:</p> <pre><code>|  incompatible types: possible lossy conversion from double to int\n</code></pre> <p>but Line 3 is OK.  If you are still wondering why it does not work, you can click on the tab to see what the compiler \"sees\" in terms of compile-time type.</p> <p>As you can see, the compile-time type of the variable <code>d</code> is <code>double</code> because that is what we declared it as.  Similarly, the compile-time type of the variable <code>i</code> is <code>int</code>.  Since <code>double</code> is the supertype of <code>int</code>, it can also store <code>int</code>.  On the other hand, an <code>int</code> cannot store <code>double</code>.</p> <p>This example shows how subtyping applies to type checking.  Java allows a variable of type \\(T\\) to hold a value from a variable of type \\(S\\) only if \\(S &lt;: T\\).  This step is called widening type conversion.  Such conversion can happen during assignment or parameter passing.</p> <p>Why is it Called Widening?</p> <p>The term widening is easy to see for primitive types with the exception of <code>long</code> to <code>float</code>.  You can immediately see that the subtype has fewer number of bits than the supertype.  Therefore, the supertype can have more possible values.  Hence, the size (i.e., the number of possible values) is wider.</p> <p>The opposite conversion is called narrowing because the size is narrower.</p>"},{"location":"02-type.html#additional-readings","title":"Additional Readings","text":"<ul> <li>Java Tutorial: Primitive Data Types and other Language Basics</li> </ul>"},{"location":"03-function.html","title":"Unit 3: Functions","text":"<p>Learning Objectives</p> <p>After this unit, students should</p> <ul> <li>understand the importance of function as a programming constructor and how it helps to reduce complexity and mitigate bugs.</li> <li>be aware of two different roles a programmer can play: the implementer and the client.</li> <li>understand the concept of abstraction barrier as a wall between the client and the implementer, including in the context of a function.</li> </ul>"},{"location":"03-function.html#function-as-an-abstraction-over-computation","title":"Function as an Abstraction over Computation","text":"<p>Another important abstraction provided by a programming language is the function (or procedure).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return zero or one values.</p> <p>Like all other abstractions, defining functions allows us to think at a higher conceptual level.  By composing functions at increasingly higher levels of abstraction, we can build programs with increasing levels of complexity.</p> <p>Functions help us deal with complexity in a few ways as you will see later.  For now, to understand the examples, we will first describe a basic element of a function.  Note that this cannot be compiled but needs to be run on Jshell.  Once we have introduced the concept of a class, our code can be compiled.</p> <p>Syntax</p> <p>The basic syntax of a function is as follows:</p> <pre><code>return_type function_name(param_type1 param1, param_type2 param2) {\n    : // function body\n}\n</code></pre> <p>To create a function, we have to specify the return type.  If there is no return type, then we need to use the type called <code>void</code><sup>1</sup>.  This is then followed by the function name.  We may have zero or more parameters for a function.</p> <ul> <li> <p>Functions allow programmers to compartmentalize computation and its effects.  We can isolate the complexity within its body: the intermediate variables exist only as local variables that have no effect outside of the function.  A function only interacts with the rest of the code through its parameters and return value, and so, reduces the dependencies between variables to these well-defined interactions.  Such compartmentalization reduces the complexity of code.</p> <p>Example</p> <pre><code>int factorial(int n) {\n  if (n == 0) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\ndouble e(int n) { // approximate e^n using Taylor series\n  double x = 1;\n  double res = 0;\n  for (int i = 0; i &lt; 10; i++) {\n    res = res + (x/factorial(i));\n    x = x * n;\n  }\n  return res;\n}\n// The n in factorial is different from the n in e.\n</code></pre> </li> <li> <p>Functions allow programmers to hide how a task is performed.  The caller of the function only needs to worry about what the function does.  By hiding the details of how, we gain two weapons against code complexity.  First, we reduce the amount of information that we need to communicate among programmers.  A fellow programmer only needs to read the documentation to understand what the parameters are for, and what the return values are.  There is no need for a fellow programmer to know about the intermediate variables or the internal computation used to implement the functions.  Second, as the design and requirements evolve, the implementation of a function may change.  But, as long as the parameters and the return value of a function remain the same, the caller of the function does not have to update the code accordingly.  Reducing the need to change as the software evolves reduces the chances of introducing bugs accordingly.</p> <p>Example</p> <pre><code>double sinc(double x) {\n  return Math.sin(x)/x;\n}\n</code></pre> <p>We do not need to know how to implement <code>sin(x)</code>, only whether <code>x</code> is in degree or radian.</p> </li> <li> <p>Functions allow us to reduce repetition in our code through code reuse.  If we have the same computation that we need to perform repeatedly on different values, we can construct these computations as functions by replacing the values with parameters, and pass in the values as arguments to the function.  This approach reduces the amount of boiler-plate code and has two major benefits in reducing code complexity and bugs.  First, it makes the code more succinct, and therefore easier to read and understand.  Second, it reduces the number of places in our code that we need to modify as the software evolves, and therefore, decreases the chance of introducing new bugs.</p> <p>Example</p> <pre><code>double distance(double x1, double y1, double x2, double y2) {\n    : // implementation omitted\n}\nboolean isEquilateral(double x1, double y1,\n    double x2, double y2, double x3, double y3) {\n  return distance(x1, y1, x2, y2) == distance(x2, y2, x3, y3)\n      &amp;&amp; distance(x1, y1, x2, y2) == distance(x1, y1, x3, y3);\n}\n// Define distance once, use it 4 times!\n// If we make a mistake in the function distance, we just have to correct it in one place\n//   instead of 4 different places if we did not use the function.\n</code></pre> </li> </ul> <p>Returning More Than One Return Value?</p> <p>To return more than one value, we need to use a data type that can store multiple values.  At that point, it becomes a question of whether eating rice is eating one meal or hundreds of meals each consisting of a single grain of rice.</p>"},{"location":"03-function.html#abstraction-barrier","title":"Abstraction Barrier","text":"<p>We can imagine an abstraction barrier between the code that calls a function and the code that defines the function body.  Above the barrier, the concern is about using the function to perform a task, while below the barrier, the concern is about how to perform the task.  </p> <p>While many of you are used to writing a program solo, in practice, you rarely write a program with contributions from only a single person.  The abstraction barrier separates the role of the programmer into two: (i) an implementer, who provides the implementation of the function, and (ii) a client, who uses the function to perform the task.  Part of the aim of CS2030/S is to switch your mindset into thinking in terms of these two roles.  In fact, in CS2030/S, you will be both but may be restricted to just being either a client or an implementer on specific functionality.</p> <p>The abstraction barrier thus enforces a separation of concerns between the two roles.  The client does not have to care how the implementer implements the functionality.  Similarly, the implementer does not have to care how the client is using the functionality as long as the client is following the specification of the functionality.</p> <p>The concept of abstraction barrier applies not only to a function but it can be applied to different levels of abstraction as well.  We will see how it is used for a higher level of abstraction in the next unit.</p> <ol> <li> <p><code>void</code> in Java is like a true nothingness (unlike Python's <code>None</code> or JavaScript's <code>undefined</code>).  If a function is declared as returning a type <code>void</code>, it cannot even be used in an assignment!\u00a0\u21a9</p> </li> </ol>"},{"location":"04-encapsulation.html","title":"Unit 4: Encapsulation","text":"<p>Learning Objectives</p> <p>After this unit, students should</p> <ul> <li>understand composite data type as an even higher level abstraction over variables.</li> <li>understand encapsulation as an object-oriented (OO) principle.</li> <li>understand the meaning of class, object, fields, and methods, in the context of OO programming.</li> <li>be able to define a class and instantiate one as an object in Java.</li> <li>appreciate OO as a natural way to model the real world in programs.</li> <li>understand reference types in Java and their differences from the primitive types.</li> </ul>"},{"location":"04-encapsulation.html#abstraction-composite-data-type","title":"Abstraction: Composite Data Type","text":"<p>Just like functions allow programmers to group instructions, give it a name, and refer to it later, a composite data type allows programmers to group primitive types together, give it a name to become a new type, and refer to it later.  This is another powerful abstraction in programming languages that helps us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.</p> <p>Defining composite data type allows programmers to abstract away and be separated from the concern of how a complex data type is represented.</p> <p>For instance, a circle on a 2D plane can be represented by the center (i.e., <code>x</code>, <code>y</code>) and its radius <code>r</code>, or it can be represented by the top left corner (i.e., <code>x</code>,<code>y</code>) and the width <code>w</code> of the bounding square.</p> <p>In C, we build a composite data type with <code>struct</code>.  For example,</p> <pre><code>typedef struct {\n  double x, y; // (x,y) coordinate of the center.\n  double r;    // radius\n} circle;\n</code></pre> <p>Once we have the <code>struct</code> defined, we have a new data type called <code>circle</code>.  However, we are not completely shielded from its representation, until we write a set of functions that operates on the <code>circle</code> composite type.  For instance,</p> <pre><code>double circle_area(circle c) { ... };\nbool   circle_contains_point(circle c, double x, double y) { ... };\nbool   circle_overlaps(circle c1, circle c2) { ... };\n  :\n</code></pre> <p>Implementing these functions requires knowledge of how a circle is represented.  The implementation will be different if we have a different representation of <code>circle</code> (e.g., <code>x</code> and <code>y</code> may represent the center of the circle or the top left corner of the bounding square).  But once the set of functions that operates on and manipulates circles is available, we can use the circle type without worrying about the internal representation.  Of course, this assumes that we will only use the functions specifically written to work on circle type.</p> <p>Additionally, the example on <code>circle_overlap</code> highlights another advantage of having a composite data type.  To see the advantage, imagine that you do not have the data type <code>circle</code>.  Then the function to check if two circles overlap would require 6 parameters.</p> <pre><code>bool   circle_overlaps(double x1, double y1, double r1,\n    double x2, double y2, double r2) { ... };\n  :\n</code></pre> <p>We have used a nice numbering to clearly indicate how the parameters are related.  Those with the same suffix belong to the same circle.  But another programmer may instead write it in a different order.</p> <pre><code>bool   circle_overlaps(double x1, double x2,\n    double y1, double y2, double r1, double r2) { ... };\n  :\n</code></pre> <p>Even worse, lazy programmers may even omit the suffix and make the entire code unreadable.  So the use of composite data type is like a \"glue\" that binds relevant data together.  That way, we know that all the elements that make up a circle will always be together.</p> <p>If we decide to change the representation of a circle, then only the set of functions that operate on a circle type need to be changed, but not the code that uses circles to do other things.  In other words, the representation of the circle and the set of functions that operate on and manipulate circles, fall on the same side of the abstraction barrier.</p> <p>If you are the programmer who writes the code for the implementation of the circle as well as the functions that operate on and manipulate the circle then you are the implementer.  On the other hand, if you are the programmer who uses the function that manipulates a circle, then you are the client.</p>"},{"location":"04-encapsulation.html#abstraction-class-and-object-or-encapsulation","title":"Abstraction: Class and Object (or, Encapsulation)","text":"<p>We can further bundle the composite data type and its associated functions on the same side of the abstraction barrier together.  This bundle is another abstraction called a class.</p> <p>Class</p> <p>A class is a data type with a group of functions associated with it.</p> <p>We call the data in the class as fields (or members, or states, or attributes, or properties<sup>1</sup>).  As for the associated functions, they are called methods.  A well-designed class maintains the abstraction barrier, properly wraps the barrier around the internal representation and implementation, and exposes just the right method interface for others to use.</p> <p>The concept of keeping all the data and functions operating on the data related to a composite data type together within an abstraction barrier is called encapsulation.</p> <p>Let's see how we can encapsulate the fields and methods associated together, using <code>Circle</code> as an example, in Java.</p> <pre><code>// Circle v0.1\nclass Circle {\n  double x;\n  double y;\n  double r;\n\n  double getArea() {\n    return 3.141592653589793 * r * r;\n  }\n}\n</code></pre> <p>The code above defines a new class using the keyword <code>class</code>, gives it a name <code>Circle</code><sup>2</sup>, followed by a block listing the member variables (with types) and the function definitions.</p> <p>Just like we can create variables of a given type, we can create objects of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.</p> <p>In Java, the keyword <code>new</code> creates an object of a given class.  For instance, to create a <code>Circle</code> object, we can use</p> <pre><code>Circle c = new Circle();\nc.r = 10;    // set the radius to 10\nc.getArea(); // return 314.1592653589793\n</code></pre> <p>To access the fields and the methods, we use the <code>.</code> notation.  For example, <code>object.field</code> or <code>object.method(..)</code>.  This can be seen in Line 2 and Line 3 of the example above.</p>"},{"location":"04-encapsulation.html#a-bad-example","title":"A Bad Example","text":"<p>Let us take a moment to appreciate the example circle v0.1 above.  This is a reasonable example as the method <code>getArea</code> is computing the area of the circle with the radius as specified in the field <code>r</code>.  So, we can clearly see that the method is associated with the data.  Consider adding another method but this time it takes in a pen and a paper and writes <code>\"CS2030S is easy\"</code> on the paper.</p> <pre><code>// Bad Circle\nclass Circle {\n  double x;\n  double y;\n  double r;\n\n  double getArea() {\n    return 3.141592653589793 * r * r;\n  }\n  void write(Pen pen, Paper paper) {  // irrelevant method\n    pen.write(paper, \"CS2030S is easy\");\n  }\n}\n</code></pre> <p>Without even knowing the implementation of <code>pen.write(..)</code>, we can already see that this method is not associated with any circle at all.  In fact, it is not even using any of the fields of the circle.</p>"},{"location":"04-encapsulation.html#object-oriented-programming","title":"Object-Oriented Programming","text":"<p>A program written in an object-oriented language such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each other's methods.</p> <p>One could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has certain properties, exhibits certain behaviors, and allows certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we use every day (unless we try to repair them)<sup>3</sup>.  </p> <p>To model a problem in an object-oriented manner, we typically model the nouns as classes and objects, the properties or relationships among the classes as fields, and the verbs or actions of the corresponding objects as methods.</p> <p>Take, for example, the following partial problem description about an online airline reservation system.</p> <p>Users need to be able to make bookings from an origin to a destination airport which may comprise multiple connecting flights. We record the booking date.</p> <p>We can identify the following from the problem description.</p> Nouns Properties Associated Verbs User <ul><li>Bookings made</li></ul> <ul><li>Make booking</li></ul> Booking <ul><li>Bookings date</li><li>Origin airport</li><li>Destination airport</li></ul> currently unknown Airport currently unknown currently unknown <p>From here, we can try to model the problem in OOP using three classes: <code>User</code>, <code>Booking</code>, and <code>Airport</code>.  However, since not much information is known about <code>Airport</code> and assuming the only identifiable information about the airport is the airport code, then maybe we do not need to create an <code>Airport</code> class.  Instead, we use a <code>String</code>.</p> <p>However, for <code>User</code> and `Booking, we need to encapsulate the information into a class.  In the case of booking, it is simply because the three different properties need to be combined.  In the case of the user, we have an associated verb that needs to be modeled as a method.</p> <p>When to Stop?</p> <p>In the discussion above, we put forward the possibility that <code>Airport</code> need not be a class.  So the question is, when should we stop modelling a noun as a class?  We may be too eager to model everything as a class, including the date to be stored as booking date.  There is also the opposite problem of too lazy to model.  For instance, we may lazily group user and booking together to form a class with 4 fields.</p> <p>There is no clear answer to this but as a general guide, you may want to ask the following questions.</p> <ul> <li>Is there multiple properties to be stored?<ul> <li>If so, then creating a class is good.</li> <li>In the case of airport, if there is only a single data, then we need not make a class.</li> </ul> </li> <li>Is there an action associated with the entity?<ul> <li>If so, then creating a class is good.</li> <li>In the case of user, although it only has a single property, it has an association action.</li> </ul> </li> <li>Is there a real world counterpart?<ul> <li>If so, model it based on the real world.</li> <li>In the case of user and booking, we have real world counterpart so we model them as separate classes.</li> </ul> </li> <li>Is there potential changes to the entity?<ul> <li>If so, then creating a class is good.</li> <li>For instance, if in the future we plan to store more information about an airport (e.g., the country it is located, etc), then having it as a class will minimize potential changes to other parts of the code (e.g., if we used <code>String</code> before, we now have to change all these <code>String</code> into <code>Airport</code>).</li> </ul> </li> </ul> <p>The guide above are not exhaustive.  But they are still a good starting point if this is your first attempt at modelling in OOP.</p>"},{"location":"04-encapsulation.html#reference-types-in-java","title":"Reference Types in Java","text":"<p>We mentioned in Unit 2 that there are two kinds of types in Java.  You have been introduced to the primitive types.  Everything else in Java is a reference type.</p> <p>The <code>Circle</code> class is an example of a reference type.  Unlike primitive variables, which never share the value, a reference variable stores only the reference to the value, and therefore two reference variables can share the same value.  For instance,</p> <pre><code>Circle c1 = new Circle();\nCircle c2 = c1;\nSystem.out.println(c2.r); // print 0\nc1.r = 10.0;\nSystem.out.println(c2.r); // print 10.0\n</code></pre> <p>The behavior above is due to the variables <code>c1</code> and <code>c2</code> referencing to the same <code>Circle</code> object in the memory.  Therefore, changing the field <code>r</code> of <code>c1</code> causes the field <code>r</code> of <code>c2</code> to change as well.</p>"},{"location":"04-encapsulation.html#special-reference-value-null","title":"Special Reference Value: <code>null</code>","text":"<p>Any reference variable that is not initialized will have the special reference value <code>null</code>.  A common error for beginners is to declare a reference variable and try to use it without instantiating an object:</p> <pre><code>Circle c1;\nc1.r = 10.0;  // error\n</code></pre> <p>Line 2 would lead to a run-time error message <pre><code>|  Exception java.lang.NullPointerException\n</code></pre></p> <p>Remember to always instantiate a reference variable before using it.</p> <p>Class Diagram (Part 1)</p> <p>A useful diagram to have when trying to visualize a class is called the class diagram.  A class diagram consists of 3 segments:</p> <ol> <li>The class name.</li> <li>The fields.</li> <li>The methods.</li> </ol> <p>In between each segment, we draw a line to clearly delimit each segment.  For the best result, the order in which the fields and methods appear should be identical to how they appear in the code.</p> <p>Additionally, we omit the implementation of the method and record only the minimal information needed.  Otherwise, there is no difference between class diagram and code.  What we want is to have a diagram that captures the essence of a class so that we can reason about our design without actually writing the code.</p> <p>For instance, consider the class <code>Circle</code> v0.1 above (reproduced below).</p> <pre><code>// Circle v0.1\nclass Circle {\n  double x;\n  double y;\n  double r;\n\n  double getArea() {\n    return 3.141592653589793 * r * r;\n  }\n}\n</code></pre> <p>The corresponding class diagram is shown below.</p> <p></p> <p>We will improve upon this class diagram with additional details while keeping the amount of information minimal to avoid information overload.</p> <p>We encourage you to practice drawing class diagrams from code and writing code from class diagrams.  This will be a useful design tool when dealing with larger programs, especially those involving multiple files.  It will take more time to debug your code so a good design will save time.</p> <p>Quote</p> <p>\"There has never been an unexpectedly short debugging period in the history of computers.\"</p> <p>Steven Levy</p>"},{"location":"04-encapsulation.html#further-readings","title":"Further Readings","text":"<ul> <li>Oracle's Java Tutorial on Classes and Objects.</li> <li>Class Diagram.  The version that we will introduce in CS2030/S is a simpler version that is sufficient for the purpose of this course.</li> </ul> <ol> <li> <p>Computer scientists just could not decide what to call this :(\u00a0\u21a9</p> </li> <li> <p>As a convention, we use PascalCase for class names and camelCase for variable and method names in Java.\u00a0\u21a9</p> </li> <li> <p>This is a standard analogy in an OOP textbook.  In practice, however, we often have to write programs that include abstract concepts with no tangible real-world analogy as classes.\u00a0\u21a9</p> </li> </ol>"},{"location":"05-infohiding.html","title":"Unit 5: Information Hiding","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>understand the drawback of breaking the abstraction barrier.</li> <li>understand the concept of information hiding to enforce the abstraction barrier.</li> <li>understand how Java uses access modifiers to enforce information hiding.</li> <li>understand what is a constructor and how to write one in Java.</li> </ul>"},{"location":"05-infohiding.html#breaking-the-abstraction-barrier","title":"Breaking the Abstraction Barrier","text":"<p>In the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There may, however, be cases where a programmer intentionally or accidentally break the abstraction barrier.  </p> <p>Consider the case of <code>Circle</code> from before, where we modify the radius <code>r</code> directly with <code>c.r = 10</code>.  In doing so, we, as the client to <code>Circle</code>, make an explicit assumption of how <code>Circle</code> implements a circle.  The implementation details have been leaked outside the abstraction barrier.   Now, if the implementer wishes to change the representation of the <code>Circle</code>, to say, store the diameter, instead.  This small implementation change would invalidate the code that the client has written!  The client will have to carefully change all the code that makes the assumption, and modify accordingly, increasing the chances of introducing a bug.</p> <p>Example</p> <p>Imagine that we -- as a client -- wrote the following code:</p> <pre><code>Circle c = new Circle();\nc.r = 10;\n</code></pre> <p>There is an implicit assumption here that the field <code>r</code> is meant to be radius.  In fact, only one of the implementation of <code>Circle</code> below can work with the code above.  In other words, if the implementer changes the implementation details, the client code above will no longer work.  The changes can be: (i) changing the name of the field (e.g., Implementation #2) or (ii) changing the meaning of the field (e.g., Implementation #3).</p> Implementation #1Implementation #2Implementation #3 <pre><code>class Circle {\n  double x;\n  double y;\n  double r; // r for radius\n\n  double getArea() {\n    return 3.141592653589793 * r * r;\n  }\n}\n</code></pre> <pre><code>class Circle {\n  double x;\n  double y;\n  double d; // d for diameter\n\n  double getArea() {\n    return 3.141592653589793 * d * d / 4.0;\n  }\n}\n</code></pre> <pre><code>class Circle {\n  double x;\n  double y;\n  double r; // r but for radiameter? anyway, it's just a name so please use meaningful name!\n\n  double getArea() {\n    return 3.141592653589793 * r * r / 4;\n  }\n}\n</code></pre> <p>From the perspective of the implementer, we want to expose as few fields/methods as possible.  This can be achieved via data hiding.  From the client's perspective, you should only follow the behavior as stated in the actual specification such as Java API.  Whenever possible, do not rely too much on observable behavior or any changes to the implementation of the API will break your program.</p> <p>Hyrum's Law</p> <p>\"With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.\"</p> <p>As an anecdote, the story goes that Windows operating system skips Windows 9 and went straight from Windows 8.1 to Windows 9 because some developers perform the following compatibility check:</p> <pre><code>if (version.startsWith(\"Windows 9\") {\n  // Windows 95 and 98\n} else { /* .. */ }\n</code></pre>"},{"location":"05-infohiding.html#data-hiding","title":"Data Hiding","text":"<p>Many OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, supports <code>private</code> and <code>public</code> access modifiers.  A field or a method that is declared as <code>private</code> cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a <code>public</code> field or method can be accessed, modified, or invoked from outside the class.</p> <p>Such a mechanism to protect the abstraction barrier from being broken is called data hiding or information hiding.  This protection is enforced by the compiler at compile time.</p> <p>In our original <code>Circle</code> class (v0.1) in Unit 4, we did not specify any access modifier -- this amounts to using the default modifier, the meaning of which is not our concern right now<sup>1</sup>  For a start, we will explicitly indicate <code>private</code> or <code>public</code> for all our methods and fields.</p> Private FieldPublic Field <pre><code>// Circle v0.2\nclass Circle {\n  private double x;\n  private double y;\n  private double r;\n\n  public double getArea() {\n    return 3.141592653589793 * r * r;\n  }\n}\n</code></pre> <p>Testing <pre><code>Circle c = new Circle();\nc.r = 10; // error\n</code></pre></p> <pre><code>// Bad Circle\nclass Circle {\n  public double x;\n  public double y;\n  public double r;\n\n  public double getArea() {\n    return 3.141592653589793 * r * r;\n  }\n}\n</code></pre> <p>Testing <pre><code>Circle c = new Circle();\nc.r = 10; // ok\n</code></pre></p> <p>Now the fields <code>x</code>, <code>y</code>, and <code>r</code> are hidden behind the abstraction barrier of the class <code>Circle</code>.  Note that these fields are not accessible and modifiable outside of the class <code>Circle</code>, but they can be accessed and modified within <code>Circle</code> (inside the abstraction barrier), such as in the methods <code>getArea</code>.</p> <p>Within the Class or Within the Object?</p> <p>Note the wording that we used.  Fields and methods with <code>private</code> access modifier can only be accessed from within the class.  This means that we can access a field belonging to a different object as long as the other object has the same class!</p> <p>Why is this the case?  In abstraction barrier, the difference between implementer and client is about who is writing the class.  So the implementer write the code for <code>Circle</code> and she is responsible for the behavior of <code>Circle</code>, even when relating to other circles.  As such, the following code is allowed and does not break the abstraction barrier because the implementer only works with <code>Circle</code>, even if the circle is from a different object.</p> <pre><code>// Circle v0.2.5\nclass Circle {\n  private double x;\n  private double y;\n  private double r;\n\n  public double getArea() {\n    return 3.141592653589793 * r * r;\n  }\n\n  public boolean isLarger(Circle c) {\n    return this.r &gt; c.r;  // ok even if c.r is private because c is Circle and we are inside the Circle class!\n  }\n}\n</code></pre> <p>Breaking Python's Abstraction Barrier</p> <p>Python tries to prevent accidental access to internal representation by having a convention of prefixing the internal variables with <code>_</code> (one underscore) or <code>__</code> (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug/error that will surface later.</p> <p>So, as a quick summary, the two access modifiers are shown below.</p> Acessed from <code>private</code> <code>public</code> inside the class outside the class"},{"location":"05-infohiding.html#constructors","title":"Constructors","text":"<p>With data hiding, we completely isolate the internal representation of a class using an abstraction barrier.  But, with no way for the client of the class to modify the fields directly, how can the client initialize the fields in a class?  To get around this, it is common for a class to provide methods to initialize these internal fields.</p> <p>A method that initializes an object is called a constructor.</p> <p>A constructor method is a special method within the class.  It cannot be called directly but is invoked automatically when an object is instantiated (i.e., when the keyword <code>new</code> is used).  In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  Let's add a constructor to our <code>Circle</code> class:</p> <pre><code>// Circle v0.3\nclass Circle {\n  private double x;\n  private double y;\n  private double r;\n\n  // Constructor\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n\n  public double getArea() {\n    return 3.141592653589793 * this.r * this.r;\n  }\n}\n</code></pre> <p>Let us see the constructor in more details.  Notice what we have in the constructor.  Besides the parameters and function body, We only have access modifiers and the function name.  Additionally, the function name is exactly the same as the class name (i.e., <code>Circle</code>).</p> <pre><code>// access modifiers   function name   parameters\n   public             Circle          (double x, double y, double r) {\n       : // omitted\n   }\n</code></pre> <p>As we have seen from Unit 4, the access modifiers can actually be omitted.  So minimally, the constructor can simply be the following:</p> <pre><code>// function name   parameters\n   Circle          (double x, double y, double r) {\n       : // omitted\n   }\n</code></pre> <p>Now, to create a <code>Circle</code> object, we need to pass in three arguments:</p> <pre><code>Circle c = new Circle(0.0, 0.5, 10.0);\n</code></pre> <p>Constructor in Python and JavaScript</p> <p>In Python, the constructor is the <code>__init__</code> method.   In JavaScript, the constructor is simply called <code>constructor</code>.</p>"},{"location":"05-infohiding.html#default-constructor","title":"Default Constructor","text":"<p>Our original circle v0.1 does not have constructor.  But as you will see below, the use of <code>new</code> keyword actually invokes a constructor.  So how does it work if there is no constructor written?  Java has a rule that adds default constructor if no constructor is given at all.</p> <p>Default Constructor</p> <p>If there is no constructor given, then a default constructor is added automatically.  The default constructor takes no parameter and has no code written for the body.  In the case of circle v0.1, the default constructor would be the following.</p> <pre><code>Circle() {\n}\n</code></pre> <p>Notice the condition \"if no constructor is given at all\".  Therefore, if there is at least one constructor written, then the default constructor will not be added automatically.</p>"},{"location":"05-infohiding.html#the-this-keyword","title":"The <code>this</code> Keyword","text":"<p>The code above also introduces the <code>this</code> keyword.  <code>this</code> is a reference variable that refers back to self, and is used to distinguish between two variables of the same name.  In the example above, <code>this.x = x</code> means we want to set the field <code>x</code> of this object to the parameter <code>x</code> passed into the constructor.</p> <p>Without the use of <code>this</code> keyword, our constructor looks like the following.</p> <pre><code>// Constructor\npublic Circle(double x, double y, double r) {\n  x = x;\n  y = y;\n  r = r;\n}\n</code></pre> <p>Think about that for a moment.  What is the expected behavior of <code>x = x</code>?  In this case, because <code>x</code> is a parameter, we are actually assigning the value of the parameter <code>x</code> back to the parameter <code>x</code>.  In other words, it is doing nothing!  The field has not been updated with the value of parameter <code>x</code>.</p> <p>Now that you have been introduced to <code>this</code>, we have also updated the method body of <code>getArea</code> and replaced <code>r</code> with <code>this.r</code>.  Although there is nothing syntactically incorrect about using <code>r</code>, sticking to the idiom of referring to members through the <code>this</code> reference makes the code easier to understand to readers.  We are making it explicit that we are referring to a field in the class, rather than a local variable or a parameter.</p> <p>So the keyword <code>this</code> can be automatically added if there is no ambiguity that we are referring to the field.  In the method <code>getArea</code>, we do not have parameter <code>r</code>.  So, all occurrences of <code>r</code> must refer to the name <code>r</code> from the outer scope.  The outer scope is the scope of the class for which the name <code>r</code> refers to the field.  This is why the statement</p> <pre><code>return 3.141592653589793 * r * r;\n</code></pre> <p>is equivalent to</p> <pre><code>return 3.141592653589793 * this.r * this.r;\n</code></pre> <p>So <code>this</code> keyword will be assigned the current instance.  But what exactly is the current instance when the method <code>getArea</code> is invoked?  The code snippet below shows how the method is actually invoked.</p> <pre><code>Circle c1 = new Circle(0.0, 0.0, 1.0);\nCircle c2 = new Circle(0.0, 0.0, 2.0);\ndouble area = c1.getArea();\n</code></pre> <p>So what should the value of <code>area</code> be?  Is it the area from <code>c1</code> (i.e., approximately \\(\\pi\\)) or is it the area from <code>c2</code> (i.e., approximately \\(4\\pi\\))?  Looking at the way the method is invoked, (i.e., <code>c1.getArea()</code>), we can see that the relevant instance is <code>c1</code>.  So we should expect the result to be approximately \\(\\pi\\).</p> <p>More generally, given the following method invocation</p> <pre><code>obj.f(..)\n</code></pre> <p>the value of <code>this</code> keyword will be <code>obj</code> within the method <code>f</code>.</p>"},{"location":"05-infohiding.html#fully-qualified-name","title":"Fully Qualified Name","text":"<p>We have seen how Java compiler does a little bit of renaming to remove ambiguity.  In the example before, the compiler replaces <code>r</code> with <code>this.r</code>.  Of course this replacement is done automatically and uses a simple set of rule based on the nearest scope.  So we can say that <code>this.r</code> is less ambiguous than <code>r</code>.</p> <p>Unfortunately, as you will see in the future, even <code>this.r</code> may still be ambiguous.  Fortunately, there is a name that can always be used to unambiguously refer to a specific name, be it variable or field.  This is called the fully qualified name (FQN).</p> <ul> <li>FQN always starts with a sequence of class names separated by a dot.</li> <li>If the name refers to a field, the FQN is then followed by the keyword <code>this</code>.  Otherwise, there is no keyword <code>this</code>.</li> <li>Finally, the FQN is followed by the actual name used.</li> </ul> <p>For example, in the case of <code>this.r</code>, the fully qualified name is actually <code>Circle.this.r</code>.  For now, we only have a single class name, which is <code>Circle</code>.  To understand this better, we have split the FQN into its components.</p> <pre><code>// class name  (dot)  refer to field  (dot)  name\n   Circle        .    this              .    r;\n</code></pre> <p>In most cases, we do not need to write the FQN.  However, it is a good practice to always keep in mind that such renaming may happen and to hopefully understand that it may lead to unexpected problem (e.g., not actually updating the field if we write <code>x = x</code> in constructor).</p>"},{"location":"05-infohiding.html#checking","title":"Checking","text":"<p>Violations to access modifiers are checked by the compiler.  In particular, trying to access, update, or invoke fields or methods with <code>private</code> modifier will give a compilation error.</p> <p>Example of Violation</p> <p>Class <code>C1</code> in a class <code>C1.java</code>.</p> <pre><code>class C1 {\n  private int x;\n\n  public C1(int x) {\n    this.x = x;\n  }\n}\n</code></pre> <p>Class <code>C2</code> in a class <code>C2.java</code>.</p> <pre><code>class C2 {\n  private int y;\n\n  public C2(int y) {\n    this.y = y;\n  }\n\n  public boolean isEqual(C1 c) {\n    return this.y == c.x;\n  }\n}\n</code></pre> <p>Try compiling them using <code>javac C1.java C2.java</code> and you will see the following error message.</p> <pre><code>C1.java:9: error: x has private access in C1\n        return this.y == c.x;\n                          ^\n</code></pre>"},{"location":"05-infohiding.html#when-is-constructor-called","title":"When is Constructor Called?","text":"<p>You may be wondering why there is no return type or why there is not even a <code>return</code> statement on constructor.  If a constructor does not return anything, how can we even assign <code>new Circle(..)</code> into a variable <code>Circle c</code> in the code snippet above?  The answer lies in the keyword <code>new</code>.  This keyword does the heavy-lifting.  We can explain the behavior of a constructor in 3 steps:</p> <ol> <li>Allocate sufficient memory location to store all the fields of the class and assign this reference to the keyword <code>this</code>.</li> <li>Invoke the constructor function and passing the keyword <code>this</code> implicitly.</li> <li>Once the constructor is done, return the reference pointed to by <code>this</code> back.</li> </ol> <p>Firstly, this is why constructor does not have a <code>return</code> statement or the return type.  It does not even use the keyword <code>void</code>.  Secondly, this is why <code>new Circle(..)</code> can be assigned to <code>Circle c</code> because the <code>new</code> keyword returns the reference to the newly created object in step 3.</p> <p>Class Diagram (Part 2)</p> <p>Now that we have access modifiers, we can add a visualisation for these access modifiers in our class diagram.</p> Modifier Symbol <code>private</code> <code>-</code> <code>public</code> <code>+</code> <p>And so the class <code>Circle</code> (reproduced below)</p> <pre><code>// Circle v0.3\nclass Circle {\n  private double x;\n  private double y;\n  private double r;\n\n  // Constructor\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n\n  public double getArea() {\n    return 3.141592653589793 * this.r * this.r;\n  }\n}\n</code></pre> <p>has the following class diagram.</p> <p></p> <p>Here we can also see that the constructor is represented as a method <code>+Circle(double x, double y, double r)</code>.  Note how this method does not have return type.  Assuming some common sense, we can guess that the code for the constructor is likely to simply be 3 assignments where the parameters are assigned to the fields with the same name.</p> <p>Additionally, we can see that the fields <code>x</code>, <code>y</code>, and <code>r</code> are all <code>private</code>.  Coupled with the only public method <code>+double getArea()</code> and assuming common sense that the method <code>getArea</code> does not change any of the fields, we can also guess that properties of a circle cannot be modified once it is created.</p> <p>Of course our guesses might be wrong.  But we can already see the usefulness of class diagram in narrowing down some possibilities.  In fact, if you are the implementer of the class <code>Circle</code>, the class diagram can guide you on what your code would look like without actually coding.</p> <ol> <li> <p>The other access modifier is <code>protected</code>.  Again, we do not want to worry about this modifier for now.\u00a0\u21a9</p> </li> </ol>"},{"location":"06-tell-dont-ask.html","title":"Unit 6: Tell, Don't Ask","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>understand what accessor and mutator are used for, and why not to use them.</li> <li>understand the principle of \"Tell, Don't Ask\".</li> </ul>"},{"location":"06-tell-dont-ask.html#accessors-and-mutators","title":"Accessors and Mutators","text":"<p>Similar to providing constructors, a class should also provide methods to retrieve or modify the properties of the object.</p> <ul> <li>Accessors: Methods that retrieve the properties of an object (i.e., retrieve the value of a field).  Also known as getter.</li> <li>Mutators: Methods that modify the properties of an object (i.e., update the value of a field).  Also known as setter.</li> </ul> <p>The use of both accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are exposing the internal representation, therefore breaking the encapsulation.  For instance:</p> <pre><code>// Circle v0.4\nclass Circle {\n  private double x;\n  private double y;\n  private double r;\n\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n\n  public double getX() {\n    return this.x;\n  }\n\n  public void setX(double x) {\n    this.x = x;\n  }\n\n  public double getY() {\n    return this.y;\n  }\n\n  public void setY(double y) {\n    this.y = y;\n  }\n\n  public double getR() {\n    return this.r;\n  }\n\n  public void setR(double r) {\n    this.r = r;\n  }\n\n  public double getArea() {\n    return 3.141592653589793 * this.r * this.r;\n  }\n}\n</code></pre> <p>In the code above, we can categorise the accessor and mutator of each field as follows.</p> Fields Accessors Mutators <code>x</code> <code>getX</code> <code>setX</code> <code>y</code> <code>getY</code> <code>setY</code> <code>r</code> <code>getR</code> <code>setR</code> <p>Do note that the name <code>getProp</code> or <code>setProp</code> for a field <code>prop</code> is optional.  But it is a good practice.  For instance, we may actually name the accessor for <code>r</code> as <code>getRadius</code> and the mutator as <code>setRadius</code> shown below.</p> <pre><code>  public double getRadius() {       // originally getR\n    return this.r;\n  }\n\n  public void setRadius(double r) { // originally setR\n    this.r = r;\n  }\n</code></pre> <p>Both Accessor and Mutator</p> <p>As we have said above, having both accessor and mutator for a private field is controversial.  But it is still better than setting the field itself public.  By having accessor and mutator, we are still adding some layer of abstraction because we can change the name of the field without affecting the client.</p> <p>Another advantage is that we may be able to perform some checks on the mutator and prevents certain invalid values from ever being assigned to the field.  Consider the method <code>setR</code> in our circle v0.4 above.  A slightly better approach is to implement it with a check to prevent setting the radius zero or negative.</p> <pre><code>public void setR(double r) {\n  if (r &gt; 0) {\n    this.r = r;\n  }\n}\n</code></pre> <p>Still, you should first check if you really need an accessor or a mutator for all fields.</p>"},{"location":"06-tell-dont-ask.html#the-tell-dont-ask-principle","title":"The \"Tell Don't Ask\" Principle","text":"<p>The mutators and accessors above are pretty pointless.  If we need to know the internal and do something with it, then we are breaking the abstraction barrier.  However, this is still slightly better than accessing the field directly.  Using accessors and mutators at least allow the implementer to change the name of the fields.  Unfortunately, the implementer cannot change the name of the accessors or mutators.</p> <p>Possible Change #1</p> <pre><code>class Circle {\n  private double x;\n  private double y;\n  private double radius;\n\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.radius = r;\n  }\n\n  // no change to getX, setX, getY, and setY\n\n  public double getR() {\n    return this.radius;\n  }\n\n  public void setR(double r) {\n    this.radius = r;\n  }\n\n  public double getArea() {\n    return 3.141592653589793 * this.r * this.r;\n  }\n}\n</code></pre> <p>So in a way, the changes are more localized.  Here, the localization is only within the class <code>Circle</code>.  The client of <code>Circle</code> need not change their code.  However, this is still not the best approach.  The better approach is to implement a method within the class that does whatever we want the class to do.</p> <p>For instance, suppose that we want to check if a given point (x,y) falls within the circle, one approach would be:</p> <pre><code>double cX = c.getX();\ndouble cY = c.getY();\ndouble r = c.getR();\nboolean isInCircle = ((x - cX) * (x - cX) + (y - cY) * (y - cY)) &lt;= r * r;\n</code></pre> <p>where <code>c</code> is a <code>Circle</code> object.</p> <p>A better approach would be to add a new <code>boolean</code> method in the <code>Circle</code> class, and call it instead:</p> <pre><code>boolean isInCircle = c.contains(x, y);\n</code></pre> <p>This better approach involves writing a few more lines of code to implement the method, but it keeps the encapsulation intact.  If one fine day, the implementer of <code>Circle</code> decided to change the representation of the circle and remove the direct accessors to the fields, then only the implementer needs to change the implementation of <code>contains</code>.  The client does not have to change anything.</p> <p>Possible Change #2</p> <pre><code>class Circle {\n  private double t; // store the top-left corner of\n  private double l; // the bounding square instead\n  private double r;\n\n  public Circle(double x, double y, double r) {\n    this.t = y + r; // compute the top bound\n    this.l = x - r; // compute the left bound\n    this.r = r;\n  }\n\n  // no more accessors/mutators\n\n  public double getArea() {\n    return 3.141592653589793 * this.r * this.r;\n  }\n\n  public boolean contains(double x, double y) {\n      : // implementation omitted but changed!\n  }\n}\n</code></pre> <p>The principle around which we can think about this is the \"Tell, Don't Ask\" principle.  The client should tell a <code>Circle</code> object what to do (compute the circumference), instead of asking \"what is your radius?\" to get the value of a field then perform the computation on the object's behalf.</p> <p>Note that in both possible changes above, the client are unaffected.  Further note that in the second possible change -- assuming the client does not use any accessors or mutators -- the code written by the client has more resistance to changes.  We not only change the name of the field but also the method implementation by redefining what it means to be contained.  The client may not even realized that internally, the implementation of <code>Circle</code> has been modified!</p> <p>Tips and Tricks</p> <p>The first tips is related to information hiding.  Although there are cases where we really have to make certain fields <code>public</code>, we would like to -- as much as possible -- first set all the fields as <code>private</code>.  Afterwards, we will need to think about the methods that are necessary for the class.  This is where the next tips will be useful.</p> <p>While there are situations where we can't avoid using accessor or modifier in a class, for beginner OO programmers like yourself, it is better to not define classes with any accessor and modifier to the private fields, and forces yourselves to think in the OO way -- to tell an object what task to perform as a client, and then implement this task within the class as a method as the implementer.</p> <p>One way to think about this is to try to think about the responsibility of the class.  Recap that the class names are typically noun.  So think about the actual object and imagine what is their responsibility.</p> <p>Take for instance a class called <code>Ball</code> and a class called <code>Player</code> (i.e., soccer player).  We can imagine that the player can kick a ball.  This is captured by the method <code>void kick(Ball b, double speed)</code> in the class <code>Player</code>.  However, it is the responsibility of the <code>Ball</code> to keep track of its own position.  This might be done by the method <code>void move(double speed)</code>.</p> <p>More closely related to the circle example, we may look at some alternative choices.  Say, for instance, we want to compute the square of the distance from the center point of the circle to any other (x, y) coordinates.  We may implement the following method</p> <pre><code>public double distanceSquared(double x, double y) {\n  double dx = this.x - x;\n  double dy = this.y - y;\n  return dx * dx + dy * dy;\n}\n</code></pre> <p>Given this method, we may not even need to provide the method <code>contains</code>.  Instead, we may choose to provide both <code>distanceSquared</code> and <code>getRadius</code>.  The latter is needed because we can check if a point (x, y) is contained within a circle if the square of the distance to the center point is less than or equal to the square of the radius.</p> <p>So which design to choose?  Typically we want to minimize the number of accessors and mutators that we have.  So the design using <code>contains</code> is preferred.  If you cannot come up with such design then having both <code>distanceSquared</code> and <code>getRadius</code> is still preferable to having accessors for all three fields.</p>"},{"location":"06-tell-dont-ask.html#further-reading","title":"Further Reading","text":"<ul> <li>Tell Don't Ask by Martin Fowler</li> <li>Why getters and setters are evil, by Allen Holub, JavaWorld</li> <li>Getters and setters are evil. Period, by Yegor Bygayenko.</li> </ul>"},{"location":"07-static-field.html","title":"Unit 7: Class Fields","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>understand the difference between instance fields and class fields.</li> <li>understand the meaning of keywords <code>final</code> and <code>static</code> in the context of a field.</li> <li>be able to define and use a class field.</li> <li>be able to use <code>import</code> to access classes from the Java standard libraries.</li> </ul>"},{"location":"07-static-field.html#static-fields","title":"Static Fields","text":"<p>Let's revisit the implementation of circle v0.3 and add a method to compute the circumference of the circle. <pre><code>// Circle v0.3\nclass Circle {\n  private double x;\n  private double y;\n  private double r;\n\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n\n  public double getArea() {\n    return 3.141592653589793 * this.r * this.r;\n  }\n\n  public double circumference() {\n    return 3.141592653589793 * this.r * 2;\n  }\n}\n</code></pre></p> <p>In the code above, we use the constant \\(\\pi\\) but hardcoded it as 3.141592653589793.  Hardcoding such a magic number is a no-no in terms of coding style.  This constant appears in at least two places.  If we hardcode such a number and want to change its precision later, we would need to track down and change every occurrence.  Every time we need to use \\(\\pi\\), we have to remember or look up what is the precision that we use.  Not only does this practice introduce more work, it is also likely to introduce bugs.  </p> <p>In C, we define \\(\\pi\\) as a macro constant <code>M_PI</code>.  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other can feel a bit constraining.  The constant \\(\\pi\\) is universal, and does not really belong to any instance of circle (i.e., the value of \\(\\pi\\) is the same for every circle!).</p> <p>Another example is the method <code>sqrt()</code> that computes the square root of a given number.  <code>sqrt</code> is a general function that is not associated with any object as well.</p> <p>A solution to this is to associate these global values and functions with a class instead of with an object.  For instance. Java predefines a <code>java.lang.Math</code> class<sup>1</sup> that is populated with constants <code>PI</code> and <code>E</code> (i.e., Euler's number \\(e\\)), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the <code>static</code> keyword.  We can additionally add a keyword <code>final</code> to indicate that the value of the field will not change and <code>public</code> to indicate that the field is accessible from outside the class.  In short, the combination of <code>public static final</code> modifiers is used for constant values in Java.</p> <pre><code>class Math {\n    :\n  public static final double PI = 3.141592653589793;\n    :\n}\n</code></pre> <p>We call these <code>static</code> fields that are associated with a class as class fields, and fields that are associated with an object as instance fields.  Note that, a <code>static</code> class field needs not be <code>final</code> and it needs not be <code>public</code>.  Class fields are useful for storing pre-computed values or configuration parameters associated with a class rather than individual objects.</p> <p>Because it is associated with the class rather than instance, we can think about <code>static</code> fields as having exactly one instance during the entire execution of the program.  So there is only exactly one instance of <code>PI</code> above regardless of how many instances of <code>Math</code> we have created.  In fact, we need not create any instance of <code>Math</code> at all to be able to use <code>PI</code>.</p>"},{"location":"07-static-field.html#accessing-class-fields","title":"Accessing Class Fields","text":"<p>A class field behaves just like a global variable and can be accessed in the code, anywhere the class can be accessed.  Since a class field is associated with a class rather than an object, we access it through its  class name.  To use the static class field <code>PI</code>, for instance, we have to say <code>java.lang.Math.PI</code>.</p> <pre><code>public double getArea() {\n  return java.lang.Math.PI * this.r * this.r;\n}\n</code></pre> <p>A more common way, however, is to use <code>import</code> statements at the top of the program.  If we have this line:</p> <pre><code>import java.lang.Math;\n</code></pre> <p>Then, we can save some typing and write:</p> <pre><code>public double getArea() {\n  return Math.PI * this.r * this.r;\n}\n</code></pre> <p>So the expression <code>Math.PI</code> refers to the class field called <code>PI</code> from the class called <code>Math</code><sup>2</sup>.  Knowing that <code>Math</code> is a class and we use the field name directly from the class name indicates that we do not need to instantiate <code>Math</code>.  This also means that the <code>this</code> keyword is omitted from the fully qualified name.</p> <p>Class Fields and Methods in Python</p> <p>Note that, in Python, any variable declared within a <code>class</code> block is a class field:</p> <pre><code>class Circle:\n  x = 0\n  y = 0\n</code></pre> <p>In the above example, <code>x</code> and <code>y</code> are class fields, not instance fields.</p>"},{"location":"07-static-field.html#example-the-circle-class","title":"Example: The Circle class","text":"<p>Now, let revise our <code>Circle</code> class to improve the code and make it a little more complete.  We now add in comments for each method and variable as well, as we always should.</p> <pre><code>// version 0.4\nimport java.lang.Math;\n\n/**\n * A Circle object encapsulates a circle on a 2D plane.  \n */\nclass Circle {\n  private double x;  // x-coordinate of the center\n  private double y;  // y-coordinate of the center\n  private double r;  // the length of the radius\n\n  /**\n   * Create a circle centered on (x, y) with given radius\n   */\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n  }\n\n  /**\n   * Return the area of the circle.\n   */\n  public double getArea() {\n    return Math.PI * this.r * this.r;\n  }\n\n  /**\n   * Return true if the given point (x, y) is within the circle.\n   */\n  public boolean contains(double x, double y) {\n    return false; \n    // TODO: Left as an exercise\n  }\n}\n</code></pre> <ol> <li> <p>The class <code>Math</code> is provided by the package <code>java.lang</code> in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we may add the line <code>import java.lang.Math</code> at the beginning of our program.  But <code>java.lang.Math</code> is special because it contains the implementation of classes that are fundamental to the Java programming language.  So, it is actually imported automatically the Java compiler on every program!\u00a0\u21a9</p> </li> <li> <p>Of course this relies on the fact that we have no variable called <code>Math</code>.  But if you are following the practice of CS2030/S, then if a name begins with uppercase, it should be a class name.  Variable name should begin with lowercase.\u00a0\u21a9</p> </li> </ol>"},{"location":"08-static-method.html","title":"Unit 8: Class Methods","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>understand the differences between instance methods and class methods.</li> <li>be able to define and use a class method.</li> <li>know that the <code>main</code> method is the entry point to a Java program.</li> <li>the modifies and parameters required for a <code>main</code> method.</li> </ul>"},{"location":"08-static-method.html#static-methods","title":"Static Methods","text":"<p>Let's suppose that, in our program, we wish to assign a unique integer identifier to every <code>Circle</code> object ever created.  Without using class fields, we might attempt the following.</p> <pre><code>class Circle {\n  private double x;  // x-coordinate of the center\n  private double y;  // y-coordinate of the center\n  private double r;  // the length of the radius\n  private final int id; // identifier\n\n  public Circle(double x, double y, double r, int id) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n    this.id = id;\n  }\n\n    : // code omitted\n}\n</code></pre> <p>Then, on every instantiation of circle, we will have to explicitly supply the latest value for <code>id</code>.</p> <pre><code>Circle c = new Circle(x, y, lastId);\n</code></pre> <p>Of course this can be tedious and prone to error especially if we may instantiate <code>Circle</code> in multiple places.  Then we will have to ensure that the latest value of <code>id</code> is communicated on these places correctly.</p> <p>As an improvement, we may actually just let the value of the latest <code>id</code> be stored in the class <code>Circle</code> itself as a class field.</p> <pre><code>class Circle {\n  private double x;  // x-coordinate of the center\n  private double y;  // y-coordinate of the center\n  private double r;  // the length of the radius\n  private final int id; // identifier\n  public static int lastId = 0; // the id of the latest circle instance\n\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n    this.id = id;\n  }\n\n    : // code omitted\n}\n</code></pre> <p>Then, each time we instantiate a circle, we have to: (i) retrieve the value of <code>lastId</code> and (ii) update the value of <code>lastId</code>.</p> <pre><code>Circle c = new Circle(x, y, Circle.lastId);\nCircle.lastId++;\n</code></pre> <p>While better, this is still prone to error as it relies on the fact that the client should not forget to use and update.  Furthermore, it requires the client to update it correctly and not just set the value of <code>lastId</code> to some random value.  But this can be done better if this is the responsibility of the implementer instead.  This can be done with the use of class method.</p> <pre><code>class Circle {\n  private double x;  // x-coordinate of the center\n  private double y;  // y-coordinate of the center\n  private double r;  // the length of the radius\n  private final int id; // identifier\n  private static int lastId = 0; // the id of the latest circle instance\n\n  /**\n   * Create a circle centered on (x, y) with a given radius\n   */\n  public Circle(double x, double y, double r) {\n    this.x = x;\n    this.y = y;\n    this.r = r;\n    this.id = Circle.lastId;\n    Circle.lastId += 1;\n  }\n\n  /**\n   * Return how many circles have ever existed.\n   */\n  public static int getNumOfCircles() {\n    return Circle.lastId;\n  }\n}\n</code></pre> <ul> <li>On Line 5, we added a new instance field <code>id</code> to store the identifier of the circle.  Note that, since the identifier of a circle should not change once it is created, we use the keyword <code>final</code> here.</li> <li>On Line 6, we added a new class field <code>lastId</code> to remember that the <code>lastId</code> of the latest circle instance.  This field is maintained as part of the class <code>Circle</code> and is initialized to 0.  Now this class field is <code>private</code> instead of <code>public</code> because it is only accessed and updated within the constructor.</li> <li>On Line 15 and 16, as part of the constructor, we initialize <code>id</code> to <code>lastId</code> and increment <code>lastId</code>.   We explicitly access <code>lastId</code> through <code>Circle</code> to make it clear that <code>lastId</code> is a class field.</li> </ul> <p>Note that all of the above are done privately beneath the abstraction barrier.  In other words, the class field that we have added is actually set to <code>private</code>.  Additionally, now it does not matter what the client does, the value of <code>lastId</code> will correctly reflect the number of circle that has been created.  The client need not even know about the existence of this class field.</p> <p>Since <code>lastId</code> is incremented by one every time a circle is created, we can also interpret <code>lastId</code> as the number of circles created so far.  On Line 22-24, we added a method <code>getNumOfCircles</code> to return its value.</p> <p>The interesting thing here is that we declare <code>getNumOfCircles</code> with a <code>static</code> keyword.  Similar to a <code>static</code> field, a <code>static</code> method is associated with a class, not to an instance of the class.  Such method is called a class method.  A class method is always invoked without being attached to an instance, and so it cannot access its instance fields or call other of its instance methods.  The reference <code>this</code> has no meaning within a class method.  Furthermore, just like a class field, a class method should be accessed through the class.  For example, <code>Circle.getNumOfCircles()</code>.</p> <p>Other examples of class methods include the methods provided in <code>java.lang.Math</code>: <code>sqrt</code>, <code>min</code>, etc.  These methods can be invoked through the <code>Math</code> class: e.g., <code>Math.sqrt(x)</code>.</p>"},{"location":"08-static-method.html#non-static-from-static","title":"Non-Static from Static","text":"<p>Recap that for static fields (i.e., class fields), we only have exactly one instance of it throughout the lifetime of the program.  More generally, a field or method with modifier <code>static</code> belongs to the class rather than the specific instance.  In other words, they can be accessed/updated (for fields, assuming proper access modifier) or invoked (for methods, assuming proper access modifier) without even instantiating the class.</p> <p>Think for a moment about the consequence of this.  If we have not instantiate the class, it means that there is no instance.  The keyword <code>this</code> captures the current instance.  If there is no instance, the keyword <code>this</code> cannot be referring to any instance.  Therefore, it is not reasonable to assign a specific value to <code>this</code> keyword.</p> <p>Since we have no reasonable value for <code>this</code> within the context of <code>static</code> method, Java actually prevents the use of <code>this</code> from any method with <code>static</code> modifier.</p> <pre><code>  public static int getLastId() {\n    return this.id;  // what is \"this\" if no Circle has been created?  what if there are 100 circles?\n  }\n</code></pre> <p>Try it out, you will get the following error.</p> <pre><code>_.java:_: error: non-static variable this cannot be referenced from a static context\n    return this.id;\n               ^\n</code></pre> <p>The opposite is not true.  We can access class fields from non-static methods.</p>"},{"location":"08-static-method.html#the-main-method","title":"The <code>main</code> method","text":"<p>The most common class method you will use is probably the <code>main</code> method.</p> <p>Every Java program has a class method called <code>main</code>, which serves as the entry point to the program.  To run a Java program, we need to tell the JVM the class whose <code>main</code> method should be invoked first.  In the example that we have seen, <pre><code>java Hello\n</code></pre></p> <p>will invoke the <code>main</code> method defined within the class <code>Hello</code> to kick start the execution of the program.</p> <p>The <code>main</code> method must be defined in the following way: <pre><code>public static final void main(String[] args) {\n}\n</code></pre></p> <p>You have learned what <code>public</code> and <code>static</code> means.  The return type <code>void</code> indicates that <code>main</code> must not return a value.  We have discussed what <code>final</code> means on a field, but are not ready to explain what <code>final</code> means on a method yet.  In fact, this is an optional modifier for the <code>main</code> method.</p> <p>The <code>main</code> method takes in an array (<code>[]</code>) of strings as parameters.  These are the command-line arguments that we can pass in when invoking <code>java</code>.  <code>String</code> (or <code>java.lang.String</code>) is another class provided by the Java library that encapsulates a sequence of characters.</p> <p>Class Diagram (Part 3)</p> <p>Static fields and/or methods are represented by underline in class diagram.  The current version of <code>Circle</code> has the following class diagram.</p> <p></p> <p>If the number of constructs for class diagram is getting too much, do not worry, we will have a unit added to the Java Guide specifically to revise class diagram with application on designing solutions to problems.</p>"},{"location":"09-composition.html","title":"Unit 9: Composition","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>how to compose a new class from existing classes using composition.</li> <li>how composition models the HAS-A relationship.</li> <li>how sharing reference values in composed objects could lead to surprising results.</li> </ul>"},{"location":"09-composition.html#adding-more-abstractions","title":"Adding more Abstractions","text":"<p>Our previous implementation of <code>Circle</code> stores the center using its Cartesian coordinate \\((x,y)\\).  We have a method <code>contains</code> that takes in the Cartesian coordinate of a point.  As such, our implementation of <code>Circle</code> assumes that a 2D point is best represented using its Cartesian coordinate.  </p> <p>Recall that we wish to hide the implementation details as much as possible, protecting them with an abstraction barrier, so that the client does not have to bother about the details and it is easy for the implementer to change the details.  In this example, what happens if the application finds that it is more convenient to use polar coordinates to represent a 2D point?  We will have to change the code of the constructor to <code>Circle</code> and the method <code>contains</code>.  If our code contains other shapes or other methods in <code>Circle</code> that similarly assume a point is represented with its Cartesian coordinate, we will have to change them as well.  It is easy for bugs to creep in.  For instance, we might pass in the polar coordinate \\((r, \\theta)\\) to a method, but the method treats the two parameters as the Cartesian \\((x,y)\\).  After all, both \\((r, \\theta)\\) and \\((x, y)\\) can be abstracted as a pair of <code>double</code> (i.e., (<code>double</code>, <code>double</code>)).</p> <p>We can apply the principle of abstraction and encapsulation here, and create a new class <code>Point</code>.  The details of which are omitted and left as an exercise.  Instead, try to practice converting class diagram into a code.</p> <p></p> <p>With the <code>Point</code> class, our <code>Circle</code> class looks like the following:</p> <pre><code>// version 0.5\nimport java.lang.Math;\n\n/**\n * A Circle object encapsulates a circle on a 2D plane.  \n */\nclass Circle {\n  private Point c;   // the center\n  private double r;  // the length of the radius\n\n  /**\n   * Create a circle centered on Point c with given radius r\n   */\n  public Circle(Point c, double r) {\n    this.c = c;\n    this.r = r;\n  }\n\n  /**\n   * Return the area of the circle.\n   */\n  public double getArea() {\n    return Math.PI * this.r * this.r;\n  }\n\n  /**\n   * Return true if the given point p is within the circle.\n   */\n  public boolean contains(Point p) {\n    // TODO: Left as an exercise\n    return false;\n  }\n}\n</code></pre> <p>This example also illustrates the concept of composition.  Our class <code>Circle</code> has been upgraded from being a bundle of primitive types and its methods, to a bundle that includes a reference type <code>Point</code> as well.  In OOP, composition is a basic technique to build up layers of abstractions and construct sophisticated classes.</p> <p>We have mentioned that classes model real-world entities in OOP.  The composition models that HAS-A relationship between two entities.  For instance, a circle has a point as the center.</p> <p>Cylinder</p> <p>Now let's build up another layer of abstraction and construct a 3D object -- a cylinder.  A cylinder has a circle as its base and has a height value.  Using composition, we can construct a <code>Cylinder</code> class:</p> <pre><code>class Cylinder {\n  private Circle base;\n  private double height;\n\n  public Cylinder(Circle base, double height) {\n    this.base = base;\n    this.height = height;\n  }\n    : // other methods omitted\n}\n</code></pre> <p>This process of composition can be extended further.  For instance, if we think of a tire as a cylinder, then we can construct a class called <code>Car</code> as consisting of 4 cylinders corresponding to each tire.</p> <pre><code>class Car {\n  private Cylinder tire1;\n  private Cylinder tire2;\n  private Cylinder tire3;\n  private Cylinder tire4;\n    : // other parts omitted\n}\n</code></pre> <p>This way, we can create more and more complicated models!</p>"},{"location":"09-composition.html#sharing-references-aka-aliasing","title":"Sharing References (aka Aliasing)","text":"<p>Recall that unlike primitive types, reference types may share the same reference values.  This is called aliasing.  Let's look at the subtleties of how this could affect our code and catch us by surprise.</p> <p>Consider the following, where we create two circles <code>c1</code> and <code>c2</code> centered at the origin (0, 0).</p> <pre><code>Point p = new Point(0, 0);\nCircle c1 = new Circle(p, 1);\nCircle c2 = new Circle(p, 4);\n</code></pre> <p>Let's say that we want to allow a Circle to move its center.  For the sake of this example, let's assume that the method <code>moveTo</code> is a mutator on the class <code>Point</code> that mutates both field <code>x</code> and <code>y</code>.  Suppose we want to move <code>c1</code> and only <code>c1</code> to be centered at (1,1).  In particular, we do not want to move <code>c2</code> at all.</p> <pre><code>p.moveTo(1, 1);\n</code></pre> <p>You will find that by moving <code>p</code>, we are actually moving the center of both <code>c1</code> and <code>c2</code>!  This result is due to both circles <code>c1</code> and <code>c2</code> sharing the same point.  When we pass the center into the constructor, we are passing the reference instead of passing a cloned copy of the center.  </p> <p>This is a common source of bugs and we will see how we can reduce the possibilities of such bugs later in this module, but let's first consider the following \"fix\" (that is still not ideal).</p> <p>Let's suppose that instead of moving <code>p</code>, we add a <code>moveTo</code> method to the <code>Circle</code> instead.  In other words, assume that there is no <code>moveTo</code> method in <code>Point</code> but there is a <code>moveTo</code> method in <code>Circle</code>.</p> <pre><code>class Circle {\n  private Point c;   // the center\n  private double r;  // the length of the radius\n    :\n\n  /**\n   * move the center of this circle to the given point\n   */\n  void moveTo(Point c) {\n    this.c = c;\n  }\n\n   :\n}\n</code></pre> <p>Now, to move <code>c1</code>,</p> <pre><code>Point p = new Point(0, 0);\nCircle c1 = new Circle(p, 1);\nCircle c2 = new Circle(p, 4);\nc1.moveTo(new Point(1, 1));\n</code></pre> <p>You will find that <code>c1</code> will now have a new center, but <code>c2</code>'s center remains at (0,0).  Why doesn't this solve our problem then?  There is no way we can mutate <code>p</code> because invoking <code>p.moveTo(1, 1)</code> will no longer work.  We have removed the method <code>moveTo</code> on class <code>Circle</code>.  Unfortunately, recall that we can further composed circles into other objects.  Let's say that we have two cylinders: <pre><code>Cylinder cylinder1 = new Cylinder(c1, 1);\nCylinder cylinder2 = new Cylinder(c1, 1);\n</code></pre></p> <p>that share the same base, then the same problem repeats itself!  One solution is to avoid sharing references as much as possible.  For instance,</p> <pre><code>Point p1 = new Point(0, 0);\nCircle c1 = new Circle(p1, 1);\n\nPoint p2 = new Point(0, 0);\nCircle c2 = new Circle(p2, 4);\n\np1.moveTo(1, 1);\n</code></pre> <p>Without sharing references, moving <code>p1</code> only affects <code>c1</code>, so we are safe.   </p> <p>The drawback of not sharing objects with the same content is that we will have a proliferation of objects and the computational resource usage is not optimized.  This is an example of the trade offs we mentioned in the introduction to this module: we are sacrificing the computational cost to save programmers from potential suffering!</p> <p>Another approach to address this issue is immutability.  We will cover this later in the module.</p>"},{"location":"unix/index.html","title":"Index","text":""},{"location":"unix/index.html#using-unix-cli","title":"Using Unix CLI","text":"<ul> <li>Background and Philosophy of Unix</li> <li>Essential Unix Commands</li> <li>Advanced Unix Commands</li> </ul>"},{"location":"unix/advanced.html","title":"Unix CLI: Advanced","text":"<p>This article is adapted from the notes of the Unix@Home Workshop  held in August 2020.</p> <p>Learning Objectives</p> <p>Students should</p> <ul> <li>appreciate the philosophy of Unix where small utility programs can be composed together to perform a complex task using the pipe <code>|</code> operator.</li> <li>be aware of basic Unix utilities: <code>echo</code>, <code>sort</code>, <code>uniq</code>, <code>grep</code>, <code>head</code>, and <code>tail</code>.</li> <li>be able to use basic pattern matching <code>*</code> <code>?</code> <code>[]</code> and <code>{}</code> in <code>bash</code>.</li> <li>know how to use Tab, Ctrl+P, and Ctrl+N to work more efficiently in <code>bash</code>.</li> <li>know how to save time and effort by automating long complex commands using <code>bash</code> scripts.</li> </ul>"},{"location":"unix/advanced.html#composing-programs-with","title":"Composing Programs with <code>|</code>","text":"<p>Another key innovation of Unix that led to its success is the invention of the <code>|</code> operator.</p> <p>Before Unix, operating systems tend to provide complex, monolithic, programs.  The philosophy of Unix, however, is to provide many small, simple, utility programs, that can be composed to complete a more complex task.  These small programs each do one thing only (and do it well) and so are easier to write and less prone to bugs.</p> <p>The composition of these utility programs relies on two things.  First, plain text is often used as input and output of the programs.  These allow the programs to understand each other easily.  Second, they use <code>|</code> to communicate with each other.  The <code>|</code> operator takes the standard output from one program and redirects it as the standard input of another program.</p> <p>For instance, <pre><code>$ cat test.txt | wc\n       1      11      64\n</code></pre> compose <code>cat</code> and <code>wc</code> together.  Recall that <code>cat</code> reads the content of the file and prints it to standard output.  Here, we pipe the standard output from <code>cat</code> to <code>wc</code>.  So now, these printed texts are redirected as the standard input to <code>wc</code>.</p> <p>But this is just the same as <pre><code>$ wc &lt; test.txt\n</code></pre> that we have seen before.  What's the power in <code>|</code>?  </p> <p>Now, recall that we have made copies of <code>test.txt</code> earlier, into <code>foo.txt</code> and <code>bar.txt</code>.  If you have not done so or have removed them, you can quickly reproduce the files with: <pre><code>$ cp test.txt foo.txt\n$ cp test.txt bar.txt\n</code></pre></p> <p>Let's suppose now I want to count the total number of words for all three files.  Instead of calling <code>wc</code> on each file one by one, and sum them up myself.  I can just run:</p> <pre><code>$ cat test.txt foo.txt bar.txt | wc\n       3      33     192\n</code></pre> <p>Here, <code>cat</code> reads the three files, concatenates their content, and passes the output to <code>wc</code> for counting.</p>"},{"location":"unix/advanced.html#useful-utilities","title":"Useful Utilities","text":"<p>Before we see more interesting examples of using <code>|</code>, let's move beyond <code>cat</code> and <code>wc</code>, and see what other simple tools are there in Unix.</p>"},{"location":"unix/advanced.html#head-and-tail","title":"<code>head</code> and <code>tail</code>","text":"<p><code>head</code> and <code>tail</code> print out the first \\(k\\) lines and last \\(k\\) lines from a file (or standard input if the file name is not given).  By default, \\(k\\) is 10, but you can pass in an argument to specify \\(k\\).</p> <pre><code>$ cat test.txt foo.txt bar.txt\nThis is a test file for learning Unix file management commands.\nThis is a test file for learning Unix file management commands.\nThis is a test file for learning Unix file management commands.\n$ cat test.txt foo.txt bar.txt | tail -1\nThis is a test file for learning Unix file management commands.\n</code></pre>"},{"location":"unix/advanced.html#echo","title":"<code>echo</code>","text":"<p><code>echo</code> simply prints out the command-line argument to the standard output.</p> <pre><code>$ echo \"hello world!\"\nhello world!\n</code></pre>"},{"location":"unix/advanced.html#sort","title":"<code>sort</code>","text":"<p><code>sort</code> rearrange the input lines in alphabetical order. <pre><code>$ sort\njohn\njane\npeter\nmary^D\njane\njohn\nmary\npeter\n</code></pre></p> <p>In the example above, I entered <code>john</code>, <code>jane</code>, <code>peter</code>, <code>mary</code> followed by Ctrl+D to signify the end of input.  <code>sort</code> prints out <code>jane</code>, <code>john</code>, <code>mary</code>, <code>peter</code>, in that order.</p>"},{"location":"unix/advanced.html#uniq","title":"<code>uniq</code>","text":"<p><code>uniq</code> remove any two consecutive lines that are the same.</p> <pre><code>$ uniq\n1\n2\n2\n2\n1\n1^D\n1\n2\n1\n</code></pre> <p>For instance, in the above, there are three consecutive lines of <code>2</code>, so only one remained.  There are also two consecutive lines of <code>1</code>, so only one remained.`</p>"},{"location":"unix/advanced.html#grep","title":"<code>grep</code>","text":"<p><code>grep</code> returns the lines of text from the given file (or the standard input) that matches the given string.  For instance, run</p> <pre><code>$ grep abc\n</code></pre> <p>and start typing in some lines of text, some containing <code>abc</code>, some do not.  <code>grep</code> will spew out into the standard output all the lines that contain the text <code>abc</code> somewhere.  As usual, hit Ctrl+D when you are done.</p>"},{"location":"unix/advanced.html#pipe-example","title":"Pipe Example","text":"<p>To give you an example of how useful <code>|</code> is, here is a real example.  When processing the registration of the workshop, I have quite a few registrations that are duplicates -- students registered more than once.  I need a quick way to count how many unique registrants are there. So I keep the student ID of all registrants in a file called <code>ID</code>.  For instance, the file <code>ID</code> contains (not real data, of course)</p> <pre><code>A1234567X,CS\nA1234559A,CEG\nA1239999J,CEG\nA1234580K,CEG\nA1233210O,CS\nA1234567X,CS\nA1234581Q,ISC\nA1233216T,ISC\nA1239999J,CEG\n</code></pre> <p>Now, to count how many unique registrants, I just need to run:</p> <pre><code>$ cat ID | sort | uniq | wc -l\n    7\n</code></pre> <p>To count how many uniq registrants are <code>CEG</code> students, I just change it to: <pre><code>$ cat ID | sort | uniq | grep CEG | wc -l\n    3\n</code></pre></p>"},{"location":"unix/advanced.html#pattern-matching-in-bash","title":"Pattern Matching in <code>bash</code>","text":"<p>We now show you another productivity shortcut.  In an example earlier, you have seen how we passed in more than one file name into <code>cat</code>.  Recall that we can use Tab to auto-complete the file names, so we can hit fewer keys on the keyboards. Now, we show you there is an even faster way.</p> <p>Instead of <pre><code>$ cat test.txt foo.txt bar.txt | wc\n</code></pre></p> <p>We could just run <pre><code>$ cat *.txt | wc\n</code></pre></p> <p>The <code>*</code> is a special character in <code>bash</code> that represents 0 or more characters.  So, this command essentially says, <code>cat</code> any files that contain 0 or more characters, followed by <code>.txt</code>.</p> <p>The table below summarizes the useful patterns:</p> Pattern Matches <code>*</code> 0 or more characters <code>?</code> one character <code>[..]</code> one character, coming from the given set between <code>[</code> and <code>]</code>, <code>-</code> to indicate a range. <code>{.., ..}</code> Either one of the names, separated by <code>,</code>."},{"location":"unix/advanced.html#example-1","title":"Example 1:","text":"<pre><code>$ ls ???.txt\nbar.txt foo.txt\n</code></pre> <p>Since we use three <code>?</code>, it matches any file name with three characters followed by <code>.txt</code>.</p>"},{"location":"unix/advanced.html#example-2","title":"Example 2:","text":"<pre><code>$ ls [f-t]*t\nfoo.txt test.txt\n</code></pre> <p>The expression <code>[f-t]*t</code> matches all file names that start with the alphabet <code>f</code>, <code>g</code>, etc., until <code>t</code>, followed by zero or more characters, followed by <code>t</code>.</p>"},{"location":"unix/advanced.html#example-3","title":"Example 3:","text":"<pre><code>$ ls *.txt\nbar.txt foo.txt test.txt\n$ ls {fo,ba}??txt   \nbar.txt foo.txt\n</code></pre> <p>The expression <code>{fo,ba}??txt</code> matches any file names the start with either <code>fo</code> or <code>ba</code>, followed by two characters, followed by <code>txt</code>.</p>"},{"location":"unix/advanced.html#leveling-up-your-productivity-with-cli","title":"Leveling Up Your Productivity with CLI","text":""},{"location":"unix/advanced.html#minimizing-hand-movements","title":"Minimizing Hand Movements","text":"<p>You have seen how you can manage files and navigate around the directory structure, all by interacting with the command-line interface.  No windows. No mouse.  Just you, the keyboard, and the terminal.  You do not even need to use any arrow keys or function keys.  </p> <p>Why is this a big deal?  Let's look at the image of the keyboard below:</p> <p></p> <p>We only need to use the keys colored in pink.  And since these keys are concentrated in a small region on the keyboard, for most of us, we can reach the keys if we just position our hands over the keyboard<sup>1</sup>, we only need to move our fingers to type.  </p> <p></p>"},{"location":"unix/advanced.html#minimizing-typing","title":"Minimizing Typing","text":"<p>We can even minimize the movement of our fingers in several ways by typing less.  We have seen several ways where we have achieved these:</p> <ul> <li>Unix commands are named economically -- they are often only a few characters long.</li> <li>We can use Tab to auto-complete a command or a file name.</li> <li>We can use Ctrl+P or Ctrl+N to repeat a previous command.</li> </ul> <p>There are many more <code>bash</code> shortcuts for productivity, if you are keen, take a look at this cheat sheet.</p> <p>You have also seen that Unix has many small, simple, utilities that we can compose to solve a task.  But composing them requires much typing:</p> <pre><code>$ cat ID | sort | uniq | grep CEG | wc -l\n</code></pre> <p>If we need to run this over and over again or share this command with someone, we can simply put these commands in a file, and then run it by invoking its name.  Such a file containing commands for the shell is called a shell script.</p> <p>For example, let's create a file named <code>hello.sh</code> containing the line <code>echo hello!</code> by: <pre><code>$ cat &gt; hello.sh\necho hello!^D\n</code></pre></p> <p>The extension <code>.sh</code> is not necessary, but it is just something I use so that I can tell that this file contains a shell script.  In the example above, <code>cat</code> will wait for me to enter something on the keyboard.  So I entered <code>echo hello!</code> followed by Ctrl+D to indicate the end of the input.</p> <p>Now, to execute this file, we run: <pre><code>$ bash hello.sh\nhello!\n</code></pre> or <pre><code>$ bash &lt; hello.sh\nhello!\n</code></pre></p> <p>Recall that we said Unix shells do not necessarily interact with the users.  This is an example.  We pass the file <code>hello.sh</code> to a new instance of <code>bash</code>, asking it to interpret the lines inside this file as commands to execute.  </p> <p>Remember that we want to minimize typing.  What if we can just pass the filename directly to <code>bash</code> to execute?</p> <pre><code>$ ./hello.sh\nbash: ./hello.sh: Permission denied\n</code></pre> <p>Here, we specify the relative path of the script <code>hello.sh</code>, including the prefix <code>./</code> (for reasons that we will explain later).  But we should get an error telling us <code>Permission defined</code>.  Recall from the <code>File Permissions</code> section that a file needs to have the executable <code>x</code> permission to be executed.  So we need to add this permission for ourselves: <pre><code>$ chmod u+x hello.sh\n$ ./hello.sh\nhello!\n</code></pre></p> <ol> <li> <p>The recommended placement of hands over the keyboard is so that the thumbs are over the Space bar, the left fingers are over A S D F, and the right fingers are over J K L ;.\u00a0\u21a9</p> </li> </ol>"},{"location":"unix/background.html","title":"Unix CLI: Background","text":"<p>This article is a replication of the notes from the Unix@Home Workshop held in August 2020.</p> <p>Learning Objectives</p> <p>Students should</p> <ul> <li>understand the basic terms: CLI, terminal, shell, command prompt.</li> <li>appreciate why CLI is more efficient.</li> <li>aware of the commonly used terminal control sequences.</li> </ul>"},{"location":"unix/background.html#what-is-command-line-interfaces","title":"What is Command-Line Interfaces?","text":"<p>The command-line interface, or just CLI for short, is an important interface that we, as computing professionals, interact with the computer for most of our day-to-day tasks.</p> <p>In contrast to graphical user interfaces where users use a mouse to click/drag on menus and windows to interact with a computer, the command-line interface uses a keyboard and text.  The users would type a command to instruct the computer to do something, and the computer would respond by displaying the reply to the user.</p> <p>CLI evolves from teletypes machines where users would interact with the computer through a typewriter-like machine (see Figure 2.2. of this article for an example).  Users would type a command on the keyboard, and the typewriter would print out, line-by-line, the output on a piece of paper.  This is the era before monitors and mice.  Again, driven by constraints and necessity, CLI interfaces are designed to be simple and economical.  The commands are short and fast to type; the responses are succinct.</p> <p> Figure 2.1.: A teletype device (Model 33 ASR) to interact with a computer. </p>"},{"location":"unix/background.html#why-cli-over-gui","title":"Why CLI over GUI?","text":"<p>Since CLI is designed to be economical, CLI is much more efficient and productive to use, in particular when we are interacting with a remote computer over the network -- sending text back and forth is much more efficient than sending graphical elements over the network.  Each character takes up to two bytes, but each pixel alone takes up 3 bytes of data.</p> <p>Another reason why using CLI is faster and more productive is that user can keep their hands on the keyboard at all times and does not need to switch frequently between keyboard and mouse._  While research has shown that GUI and mouse are great for casual users, for software developers that need to type on the keyboard most of the time, having to switch between keyboard and mouse is a productivity-killer.</p> <p>Further, CLI commands typically provide a host of options that is accessible directly (in contrast to clicking through preference dialogues) from the command line, making these commands flexible and customizable.</p> <p>Finally, since these commands are just text, we can put together a sequence of commands easily as a script, to automate highly repetitive tasks.</p>"},{"location":"unix/background.html#what-is-a-terminal","title":"What is a Terminal?","text":"<p>With the advances in Cathode-ray tube (CRT), the teletype machine is replaced with computer terminals in the late 1970s.  Instead of printing the output on paper, the output from CLI is now printed on a monitor supporting 24x80 characters on screen in black and white (or green).</p> <p> Figure 2.2.: The VT100 Computer Terminal. </p> <p>In modern days, operating systems still use similar underlying functionalities to read in keyboard inputs and print the output as text to show to the users, but instead of these clunky special purpose devices, the functionality of a terminal is replaced by programs called terminal emulator or virtual terminal.  Examples include <code>Terminal</code> and <code>iTerm2</code> on macOS; <code>Windows Terminal</code> on Microsoft; <code>xterm</code> and <code>konsole</code> on Ubuntu, etc.  Many legacy control commands on these teletype machines remain in today's computing environment, such as the terminal control sequence.</p>"},{"location":"unix/background.html#what-is-a-shell","title":"What is a Shell?","text":"<p>The term CLI refers to a type of user interface.  To realize this interface, Unix computing environments rely on another type of program called shell.</p> <p>A shell usually works closely with a terminal to get inputs from the users, interpret the meaning of the inputs, execute the tasks (perhaps through the invocation of other programs), and returned the output to the user through the terminal.</p> <p>Note that a shell can run on its own without a terminal (it can read input from a file, and write the output to a file, for instance).</p> <p>There are many shells available, each with different bells and whistles to help improve our productivity.</p> <p>The most popular shell that comes as default on many Unix systems is <code>bash</code> or Bourne Again Shell.  This is the shell that we will use in this workshop and as default in the SoC Unix computing environment.</p> <p>Other popular shells are <code>fish</code> and Oh-my-zsh (<code>zsh</code>).</p>"},{"location":"unix/background.html#command-prompt","title":"Command Prompt","text":"<p>A shell has a command prompt. It typically looks something like this, but will be different depending on the default configuration on your machine:</p> <pre><code>ooiwt@pe111:~$\n</code></pre> <p>The prompt is where you type in a command for the shell to interpret and execute.</p> <p>In <code>bash</code>, the command prompt can be customized to include information such as the username, hostname, time, current working directory, etc.  It is customary to use the <code>$</code> sign as the final character of the prompt.  In our examples, we will just show <code>$</code> to indicate the command prompt.</p> <p>Depending on the habit, sometimes you are asked to type in a command \"into the terminal\", \"into the shell\", or \"into bash\".  They all mean the same thing: type in the command at the command prompt of the shell.</p>"},{"location":"unix/background.html#terminal-control-sequence","title":"Terminal Control Sequence","text":"<p>On the old teletype machines, a user can send special commands to the teletype machines to control their operation.  Many of these special commands still exist today, and can be triggered by hitting a combination of Ctrl and another key (i.e., a control sequence).</p> <p>The following lists some of the most useful control sequences to know:</p> <ul> <li> <p>Ctrl+D :   signal the end of input to a program.  This is also used to exit from a shell (by telling the shell that you have no more input to send, and you are done with it).</p> </li> <li> <p>Ctrl+Z :   suspend the current running program.  This pauses the execution of the program (but not terminates it).  In the <code>bash</code> shell, the most recently suspended program can resume executing in the background with the command <code>bg</code> or be brought back to execution in the foreground again with the command <code>fg</code>.   </p> </li> <li> <p>Ctrl+C :   terminate the current running program.</p> </li> <li> <p>Ctrl+S :   freeze the terminal.  This is a legacy control command that pauses the output printing of a teletype machine.  You shouldn't need to use this control sequence.</p> </li> <li> <p>Ctrl+Q :   resume the terminal.  This is a legacy control command that resumes the printing of a teletype machine.  You shouldn't need to use this control sequence unless you accidentally hit Ctrl+S</p> </li> </ul> <p>Ctrl+Z vs. Ctrl+C</p> <p>A common mistake for new students is to hit Ctrl+Z frequently if something goes wrong with their program -- this behavior could lead to multiple suspended programs (which still occupy resources such as memory on the computer).  The right sequence to use is Ctrl+C -- which terminates the program (and frees up the resources).</p> <p>Ctrl+S accidents</p> <p>Since Ctrl+S is used as the \"save\" shortcut in non-Unix environment, many students accidentally hit this control sequence, causing their terminal to freeze.  Don't panic if this happens.  Just hit Ctrl+Q and things will be back to normal.</p>"},{"location":"unix/background.html#references","title":"References","text":"<ul> <li>The Art of Unix Usability: Command Line Interfaces, by Eric Steven Raymond</li> </ul>"},{"location":"unix/essentials.html","title":"Unix CLI: The Essentials","text":"<p>This article is adapted from the notes of the Unix@Home Workshop held in August 2020.  It contains the essential knowledge that a CS2030S students need to survive using the PE nodes to do the labs (and to use a Unix CLI in general).</p> <p>Learning Objectives</p> <p>Students should</p> <ul> <li>be able to navigate comfortably in a Unix file system using shell commands <code>cd</code>, <code>pwd</code>, and <code>ls</code>.</li> <li>be able to use <code>.</code>, <code>..</code>, <code>~</code> or <code>/</code> to form a relative or absolute path name to a file.</li> <li>be able to organize files in a Unix file system using shell commands <code>mkdir</code>, <code>rmdir</code>, <code>mv</code>, <code>rm</code>, and <code>cp</code>.</li> <li>be able to view the content of the file using <code>cat</code>, <code>more</code> or <code>less</code>.</li> <li>be able to manage the permission of a file using <code>chmod</code>.</li> <li>be able to perform standard input/output redirection with <code>&lt;</code> and <code>&gt;</code>.</li> </ul>"},{"location":"unix/essentials.html#unix-directory","title":"Unix Directory","text":"<p>Unix organizes files according to a directory structure.  The following shows an example.</p> <p></p> <p>This structure is also known as a directory tree.  There are two important directories that you need to know.</p>"},{"location":"unix/essentials.html#root-directory","title":"Root Directory","text":"<p>The root directory is the directory at the top of the directory tree<sup>1</sup>. It is simply referred to as <code>/</code>, without any name.  Under the root directory are many other system directory, which a casual user does not normally need to (and have no permission to) modify.</p>"},{"location":"unix/essentials.html#home-directory","title":"Home Directory","text":"<p>Each user has his/her own home directory.  The above figure shows where the home directory of the user <code>ooiwt</code> resides in the directory tree. The user <code>ooiwt</code> may create files or directories in his/her home directory, but not elsewhere unless permission is given.</p> <p>The home directory is referred to with the symbol <code>~</code> in <code>bash</code>.  Sometimes we add the username behind <code>~</code> to indicate the home directory of the other user. E.g., <code>~bob</code> means the home directory of a user named <code>bob</code>.</p>"},{"location":"unix/essentials.html#current-working-directory","title":"Current Working Directory","text":"<p>A user can navigate around the directory tree.  The current working directory is the directory that the user is currently in.  In contrast to the root and home directory, which are fixed<sup>2</sup>, the current working directory changes as the user moves around.  Knowing the current working directory is important since this is the default location in the directory tree a command executes.  As such, many systems by default display the current working directory as part of the <code>bash</code> command prompt.</p> <p>The current working directory is referred to with the symbol <code>.</code> in <code>bash</code>.</p>"},{"location":"unix/essentials.html#parent-directory","title":"Parent Directory","text":"<p>The parent directory is directory one layer up from the current directory.</p> <p>The parent directory is referred to with the symbol <code>..</code> in <code>bash</code>.</p> <p>To summarize, here are the short form representations:</p> Symbol Meaning <code>/</code> the root directory <code>~</code> the home directory <code>.</code> the current working directory <code>..</code> the parent directory"},{"location":"unix/essentials.html#specifying-a-path","title":"Specifying a Path","text":"<p>To specify a directory or a file in the Unix directory tree, we can use either the absolute path or the relative path.</p>"},{"location":"unix/essentials.html#absolute-path","title":"Absolute path","text":"<p>The absolute path is constructed as follows, starting from the root of the directory structure, find a path (a sequence of directories) to the location that you want to specify, then concatenate the names of the directories together, separated by the forward-slash <code>/</code>.  This is a similar notation used for Website URLs, so you should already be familiar with it.  For instance, the path <code>/home/o/ooiwt</code> is the absolute path of the directory named <code>ooiwt</code> in the figure above.</p> <p>An absolute path is independent of the current working directory and always start with <code>/</code> or <code>~</code></p>"},{"location":"unix/essentials.html#relative-path","title":"Relative path","text":"<p>The relative path is dependent on the current working directory.  To refer to another location, start from the current directory, and find a path (a sequence of directories) to the location that you refer to.  When we go up a tree, we use <code>..</code> to represent the directory.</p> <p>For example, referring to the figure above, if we are in the directory <code>/home/b</code>, and we wish to refer to <code>/home/o/ooiwt</code>, we can use the relative path <code>../o/ooiwt</code>.  If we wish to refer to <code>/home/b/bob</code>, we can use the relative path <code>bob</code>.</p> <p>A relative path never starts with <code>/</code>.</p>"},{"location":"unix/essentials.html#directory-related-commands","title":"Directory-related Commands","text":"<p>Now, let's take a look at some basic commands available in <code>bash</code> that deals with navigation and directories.</p>"},{"location":"unix/essentials.html#pwd-print-current-working-directory","title":"<code>pwd</code>: Print Current Working directory","text":"<p><code>pwd</code> shows you which directory you are currently in.  Type <code>pwd</code> into the command prompt, and it will print the absolute path to your current working directory. For instance, Suppose you are in <code>/home/o/ooiwt</code>, entering</p> <pre><code>pwd\n</code></pre> <p>will give the output</p> <pre><code>/home/o/ooiwt\n</code></pre>"},{"location":"unix/essentials.html#ls-list-content-of-a-directory","title":"<code>ls</code>: LiSt content of a directory","text":"<p>The <code>ls</code> list the content in the current working directory.</p> <p>Rule of Silence</p> <p>Unix follows the economical rule of silence: programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if <code>ls</code> has nothing to list, it will list nothing (as opposed to, say, printing \"This is an empty directory.\")</p> <p>In Unix, a file or directory with a name that starts with <code>.</code> is hidden from <code>ls</code>.  Common hidden files are <code>.vimrc</code>, the configuration file for <code>vim</code>, and <code>.ssh</code>, the directory to store your SSH keys and configuration.  To view all the files, including hidden files, run <code>ls</code> with the <code>-a</code> flag (<code>a</code> stands for all).</p>"},{"location":"unix/essentials.html#mkdir-make-a-subdirectory","title":"<code>mkdir</code>: MaKe a subDIRectory","text":"<p>The <code>mkdir</code> command creates a subdirectory with the given name in the current directory.</p> <p>In the example below, we assume that we start with an empty directory.</p> <pre><code>$ ls\n$ mkdir workshop\n$ ls\nworkshop\n$ ls -F\nworkshop/\n</code></pre> <p>Here, we create a directory called <code>workshop</code>.  Now, when we <code>ls</code>, you can see the directory listed.</p> <p>You may also use <code>ls -F</code> for more information (<code>-F</code> is one of the many options/flags available for the <code>ls</code> command. To see a complete list of the options, refer to the man pages, i.e., <code>man ls</code>).</p> <p>The slash <code>/</code> beside the filename tells you that the file is a directory.  A normal file does not have a slash beside its name when \"ls -F\" is used.</p> <p>You may also use the <code>ls -l</code> command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.</p> <p>Use Up Arrow for Command History</p> <p><code>bash</code> maintains a history of your previously executed commands, and you may use the Ctrl+P (previous) and Ctrl+N (next) to go through it. Press the Ctrl+P until you find a previously executed command. You may then press Enter to execute it or edit the command before executing it. This is handy when you need to repeatedly execute a long <code>bash</code> command.</p>"},{"location":"unix/essentials.html#cd-change-directory","title":"<code>cd</code>: Change Directory","text":"<p>To navigate in the directory tree, changing the current working directory from one to another, we use the <code>cd</code> command.</p> <pre><code>$ pwd\n/home/o/ooiwt\n$ cd workshop\n$ pwd\n/home/o/ooiwt/workshop\n</code></pre> <p>Suppose our starting working directory is <code>/home/o/ooiwt</code>, after we <code>cd</code> into <code>workshop</code>, the current working directory becomes <code>/home/o/ooiwt/workshop</code>.  Note that <code>cd</code> can take in either an absolute path or a relative path.  The example above takes in a relative path as the argument.</p> <p>As mentioned in \"Unix CLI: Background\", it is common to include the current working directory into the shell's prompt.  So, you may see your command prompt updated to include the new working directory.</p> <p>Entering <code>cd</code> alone (without argument) brings you back to your home directory.  </p>"},{"location":"unix/essentials.html#rmdir-remove-a-subdirectory","title":"<code>rmdir</code>: ReMove a subDIRectory","text":"<p><code>rmdir</code> removes a subDIRectory in the current directory -- note that a directory must be empty before it can be removed.</p> <p>The command</p> <pre><code>$ rmdir workshop\n</code></pre> <p>will remove the directory that you just created.</p>"},{"location":"unix/essentials.html#file-management","title":"File Management","text":"<p>This note assumes that you are familiar with navigation with the Unix directory structure.</p> <p>We will now learn some commands to help us deal with files.</p> <p>Let's recreate the <code>workshop</code> directory in case you have already deleted it with the <code>rmdir</code> at the end of the last unit.</p> <pre><code>$ mkdir -p workshop\n$ cd workshop\n$ ls\n</code></pre> <p>All the above commands should complete successfully and silently.  Let's populate the directory with a new file.  Cut-and-paste the command below into the command prompt:</p> <pre><code>wget https://www.comp.nus.edu.sg/~ooiwt/unix-workshop/test.txt\n</code></pre> <p>You should see a file being downloaded and saved with an output similar to below:</p> <pre><code>--2020-07-27 15:26:49--  https://raw.githubusercontent.com/nus-unix-workshop/2021-s1/master/test.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.0.133, 151.101.64.133, 151.101.128.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.0.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 64 [text/plain]\nSaving to: \u2018test.txt\u2019\n\ntest.txt              100%[======================&gt;]      64  --.-KB/s    in 0s\n\n2020-07-27 15:26:50 (2.35 MB/s) - \u2018test.txt\u2019 saved [64/64]\n</code></pre> <p>Now run <code>ls</code>, and you should see that <code>ls</code> returns <code>test.txt</code> as the content of the current working directory.</p> <pre><code>$ ls\ntest.txt\n</code></pre>"},{"location":"unix/essentials.html#cp-copy-files","title":"<code>cp</code>: CoPy files","text":"<p>Now let's try to copy this file to another name.</p> <pre><code>$ cp test.txt foo.txt\n$ ls\ntest.txt foo.txt\n</code></pre> <p>The command above copies the file <code>test.txt</code> into <code>foo.txt</code>.</p> <p>If you want to copy the whole directory, use <code>-r</code> flag, where <code>r</code> stands for copying recursively.</p> <p>Now let's create another directory called <code>copy</code>.</p> <pre><code>$ cd ..\n$ mkdir copy\n$ cd copy\n$ ls\n</code></pre> <p>Run <code>pwd</code> to double-check that you are in the directory called <code>copy</code> that is at the same level as <code>workshop</code>.</p> <p>Now, we are going to use <code>cp</code> with the <code>-r</code> flag, to copy recursively the whole of <code>workshop</code> directory over.</p> <pre><code>$ cp -r ../workshop .\n</code></pre> <p>The command <code>cp</code> takes in two arguments, the first is the source, and the second is the destination.</p> <p>Note that we use <code>.</code> above to indicate that we wish to copy the whole subtree of <code>workshop</code> over the current directory.  The command should complete without any message.  Upon completion, you can run <code>ls</code> to double-check that the workshop directory exists under <code>workshop</code>.</p> <p><code>cp</code> Overwrites</p> <p>If there is an existing file with the same name, <code>cp</code> will overwrite the existing file without warning.</p>"},{"location":"unix/essentials.html#mv-move-or-rename-files","title":"<code>mv</code>: MoVe or rename files","text":"<p>Now, let's change directory back to <code>workshop</code>.</p> <pre><code>$ cd ../workshop\n</code></pre> <p>and use the <code>mv</code> command to rename <code>foo.txt</code> into <code>bar.txt</code>.</p> <pre><code>$ ls\nfoo.txt test.txt\n$ mv foo.txt bar.txt\n$ ls\nbar.txt test.txt\n</code></pre> <p>As you can see above, just like <code>cp</code>, <code>mv</code> takes in two arguments, the first is the source and the second is the destination.</p> <p>If the destination of <code>mv</code> is a directory, however, instead of renaming, the <code>mv</code> commands move the source to the destination directory.</p> <pre><code>$ ls\nbar.txt test.txt\n$ mv ../copy/workshop/foo.txt .\n$ ls\nbar.txt foo.txt test.txt\n</code></pre> <p>Here, you can see that we have moved <code>foo.txt</code> over to the current directory.</p> <p><code>mv</code> Overwrites</p> <p>If there is an existing file with the same name, <code>mv</code> will overwrite the existing file without warning. <code>mv</code> comes with a <code>-i</code> flag that interactively asks you if you are sure if you want to overwrite a file.  It is a good idea to always run <code>mv -i</code>. Hit Y to continue overwriting the existing file.  You can look up on the Internet on how to make <code>-i</code> the default using <code>alias</code> command in <code>.bashrc</code>.</p> <p>Use Tab for Name Completion</p> <p>If you have a very long file name, you may use the <code>bash</code> auto-completion feature to reduce typing. For instance, you may type:</p> <pre><code>$ mv t\n</code></pre> <p>and press the Tab key, <code>bash</code> will complete the filename for you if there is only one filename with the prefix \"t\". Otherwise, it will fill up the filename to the point where you need to type in more characters for disambiguation. The Tab key can also complete the name of a command.</p>"},{"location":"unix/essentials.html#rm-remove-files","title":"<code>rm</code>: ReMove files","text":"<p>We can use <code>rm</code> to remove files.  Be careful with this command -- files deleted cannot be restored.  There is no trash or recycled bin like in Mac or Windows.</p> <pre><code>$ ls\nbar.txt foo.txt test.txt\n$ rm foo.txt\n$ ls\nbar.txt test.txt\n</code></pre> <p><code>rm -rf</code></p> <p>While the Unix command line provides lots of flexibility and power, with great power comes great responsibility.  Some commands are extremely dangerous.  <code>rm -rf *</code> is the most famous one.  The notation <code>*</code> refers to all files, and the flag <code>-f</code> means forceful deletion (with no question asked!), and <code>-r</code> means remove recursively everything under the current directory tree.  Accidentally running this command has ruined many lives.  Read more here</p> <p><code>rm</code> comes with a <code>-i</code> flag that interactively asks you if you are sure if you want to delete a file.  It is a good idea to always run <code>rm -i</code>.</p> <pre><code>$ rm -i bar.txt\nrm: remove regular file 'bar.txt'?\n</code></pre> <p>Type <code>y</code> or <code>n</code> to answer yes or no respectively.</p>"},{"location":"unix/essentials.html#cat-catenate-file-content-to-screen","title":"<code>cat</code>: CATenate file content to screen","text":"<p>To quickly take a look at the content of the file, use the <code>cat</code> command.</p> <pre><code>$ cat test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p><code>less</code> is a variant of <code>cat</code> that includes features to read each page leisurely and is useful for long files.</p> <pre><code>$ less test.txt\n</code></pre> <p>In <code>less</code>, use <code>&lt;space&gt;</code> to move down one page, <code>b</code> to move Back up one page, and <code>q</code> to Quit.</p>"},{"location":"unix/essentials.html#man-online-manual","title":"<code>man</code>: Online MANual","text":"<p>An online help facility is available in Unix via the <code>man</code> command (<code>man</code> stands for MANual). To look for more information about any Unix command, for example, <code>ls</code>, type <code>man ls</code>. Type <code>man man</code> and refer to Man Pages to find out more about the facility. To exit <code>man</code>, press <code>q</code>.</p>"},{"location":"unix/essentials.html#file-permission-management","title":"File Permission Management","text":"<p>File permissions determine who can do what to a file.  Typically, you do not need to fiddle with the file permission, but when you need to, it is usually for an important reason, and it is critical to do it right.</p>"},{"location":"unix/essentials.html#the-what-of-file-permissions","title":"The What of File Permissions","text":"<p>Let's look at what you can do to a file first.  Unix file permissions allow control of three actions: <code>r</code> (read), <code>w</code> (write) and <code>x</code> (execute).  These permission settings allow the following different actions to be done for regular files and directories.</p> permission effect on file effect on directory <code>r</code> reading the content of a file read the names of the files in the directory <code>w</code> writing into a file create/delete/rename files in the directory <code>x</code> executing a file access contents and meta-info (size, creation time) of files in the directory <p>These three actions can be controlled independently.</p> <p>The permissions on a file can be expressed in two ways:</p> <ul> <li> <p>using symbolic notation.  For instance,  <code>rwx</code>, <code>r-x</code>, <code>-wx</code>, where a <code>-</code> means that the corresponding permission is not given (in the order of <code>r</code>, <code>w</code>, <code>x</code>).</p> </li> <li> <p>using a numerical notation. This notation uses a digit between 0 and 7, which is computed as a sum of the individual digit representing the permissions: <code>r</code> is represented with 4, <code>w</code> is represented with 2, and <code>x</code> is represented with 1. For instance, <code>r-x</code> has a numerical representation of 5, and <code>-wx</code> has a numerical representation of 3.</p> </li> </ul>"},{"location":"unix/essentials.html#the-who-of-file-permissions","title":"The Who of File Permissions","text":"<p>Unix divides the users into three classes: <code>u</code> is the user who owns the file; <code>g</code> refers to the users in the same group as the user; and <code>o</code> are all the other users.</p> <p>The permissions can be controlled separately for these classes of users.  The permission notation simply concatenates the file permissions of each class of users together, in the order of <code>u</code>, <code>g</code>, and <code>o</code>.</p> <p>For instance, the permission of 644, or <code>rw-r--r--</code>, on a file means that:</p> <ul> <li>the owner can read and write</li> <li>the group users can only read</li> <li>all the other users can only read</li> </ul>"},{"location":"unix/essentials.html#checking-file-permission","title":"Checking file permission","text":"<p>You can view the permission of a file by using the <code>ls -l</code> command (<code>l</code> for long format):</p> <pre><code>$ ls -l test.txt\n-rw-r--r--@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre> <p>Ignoring the first <code>-</code> and the last <code>@</code>, you can see that the permission of <code>test.txt</code> is 644.</p>"},{"location":"unix/essentials.html#the-chmod-command","title":"The <code>chmod</code> command","text":"<p>You can use <code>chmod</code> command to change the permissions of a file or a directory.</p> <p>For instance,</p> <pre><code>$ chmod 666 test.txt\n$ ls -l test.txt\n-rw-rw-rw-@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre> <p>would change add the permission <code>w</code> to both group and other users<sup>1</sup>.</p> <p>An alternative way is to just specify the changes.  To remove the permission to write from others, you can run:</p> <pre><code>$ chmod o-w test.txt\n$ ls -l test.txt\n-rw-rw-r--@ 1 ooiwt  staff  64 Jul 28 09:52 test.txt\n</code></pre>"},{"location":"unix/essentials.html#common-scenarios-for-chmod","title":"Common Scenarios for <code>chmod</code>","text":"<p>Here are some scenarios where you might need to use the <code>chmod</code> command:</p> <ul> <li> <p>If you use the SoC Unix server to do your homework, you should prevent the directory that stores your homework from being accessible by other users.  Make sure that your homework directory as the permission of <code>700</code>.</p> </li> <li> <p>If you download a file from the Internet and you do not have the permission to read it, you should do a <code>u+r</code> to give yourself the read permission.</p> </li> <li> <p>A program should have execution permission to run.  If you have a script or an executable file that you can't run, give yourself the execution permission <code>u+x</code>.</p> </li> </ul>"},{"location":"unix/essentials.html#standard-inputoutput","title":"Standard Input/Output","text":""},{"location":"unix/essentials.html#history","title":"History","text":"<p>Two of the design decisions of Unix that lead to its simplicity are the decisions to (i) decouple the physical input/output devices from the programs, allowing programs written for Unix to read from abstract input and output devices; and (ii) make all programs read and write from these abstract input and output devices by default.  Before Unix, the older operating systems often require programmers to painstakingly set up connections to the teletype machines and other devices for reading inputs and printing outputs.   With Unix, programmers can now focus on solving the tasks at hand and let Unix takes care of the input and output.</p> <p>The two abstract devices that Unix provides are called standard input and standard output.  By default, the standard input refers to the keyboard and the standard output is the terminal.</p>"},{"location":"unix/essentials.html#examples-using-cat-and-wc","title":"Examples using <code>cat</code> and <code>wc</code>","text":"<p>Let's look at these concepts closer, by examining some examples.</p> <p>Remember <code>cat</code>?  The <code>cat</code> command takes in a filename and it prints the content of the file to the standard output.</p> <pre><code>$ cat test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p>If no filename is given, <code>cat</code> by default try to read from the standard input.  Try running:</p> <pre><code>$ cat\n</code></pre> <p>You will see that the command is waiting for you to type in something.  Type in anything, as soon as you press Enter, <code>cat</code> is going to read in the text from the standard input, as if it is the content of a file, and then prints the content to the standard output.  You can keep typing, supplying text to <code>cat</code>, or you can type Ctrl+D to send the end-of-input command to <code>cat</code>.</p> <p>Let's look at another command, <code>wc</code>.  <code>wc</code> is a utility that counts the number of lines, words, characters.  If we call <code>wc</code> and supply it a file name, it will count the number of lines, words, and characters in that given file.</p> <pre><code>$ wc test.txt\n       1      11      64 test.txt\n</code></pre> <p>The output means that there is 1 line, 11 words, and 64 characters in the file <code>test.txt</code>.</p> <p>But if you do not pass in any file name, <code>wc</code> is going to read in the text from the standard input, as if it is the content of a file, and prints the three counters to the standard output.  Go ahead and try:</p> <pre><code>$ wc\n</code></pre> <p>You will see that the <code>wc</code> command is waiting for you to type in something.  Type in a few sentences, you can hit Enter for a new line.  When you are done, type Ctrl+D.  <code>wc</code> will count the number of lines, words, and characters for the text that you just entered.</p>"},{"location":"unix/essentials.html#output-redirection","title":"Output Redirection","text":"<p>By defining two abstract input and output devices (or channels), Unix frees the programmers from worrying about where to read the input from and write the output to.  Most of the time, we can write the output of the program to the standard output.  In instances where we need to write the output to another location, we can just redirect the output.</p> <p>The operators <code>&gt;</code> and <code>&gt;&gt;</code> are used to redirect the standard output to a file.  The difference is that <code>&gt;</code> will overwrite the given file, while <code>&gt;&gt;</code> will concatenate into the given file.</p> <p>For example:</p> <pre><code>$ wc test.txt &gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n</code></pre> <p>The first command redirects the output from <code>wc</code> to a file named <code>test.count</code>, so you do not see anything printed to the output anymore.  We can check by running <code>cat</code> on the new file <code>test.count</code> -- indeed the original output from <code>wc</code> is now stored in the file <code>test.count</code>.</p> <p>If we repeat the command <code>wc test.txt &gt; test.count</code> again, you can see that the file has been overwritten with the output from <code>wc</code> again.  But if we replace <code>&gt;</code> with <code>&gt;&gt;</code>, a new line is concatenated into <code>test.count</code>.   So the file now has two lines.</p> <pre><code>$ wc test.txt &gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n$ wc test.txt &gt;&gt; test.count\n$ cat test.count\n       1      11      64 test.txt\n       1      11      64 test.txt\n</code></pre>"},{"location":"unix/essentials.html#input-redirection","title":"Input Redirection","text":"<p>The operator <code>&lt;</code> is used to redirect a file into the standard input. So, instead of reading from the keyboard, we can now read from a file.  Commands such as <code>cat</code> and <code>wc</code> already support from a file directly, so there is no difference in terms of functionality to run the commands by passing in the file name, or by using the <code>&lt;</code> operator.</p> <pre><code>$ wc test.txt\n       1      11      64 test.txt\n$ wc &lt; test.txt\n       1      11      64\n$ cat test.txt\nThis is a test file for learning Unix file management commands.\n$ cat &lt; test.txt\nThis is a test file for learning Unix file management commands.\n</code></pre> <p>Note the slight difference in the output format of the second <code>wc</code> above -- it no longer prints the file name since from <code>wc</code> points of view, it is read from the standard input and not from a file, so it is not aware of the file named <code>test.txt</code></p> <p>In most CS programming assignments, however, to keep things simple, you will be asked to read from the standard input only, so the <code>&lt;</code> is a great time-saver -- you do not have to repeatedly type in the same input data over and over from the keyboard.  You can just save the input data in a file, then redirect it to standard input with the <code>&lt;</code> operator.</p>"},{"location":"unix/essentials.html#other-useful-online-tools","title":"Other Useful Online Tools","text":"<ul> <li>explainshell explain each shell command for you</li> </ul> <ol> <li> <p>Giving write permission to other users is a security risk.  You should not do this unless you know what you are doing.\u00a0\u21a9\u21a9</p> </li> <li> <p>Not exactly true -- since Unix is designed to be flexible, even the root and the home directory can be changed!  But let's not worry about that for now since there is no good reason to do that as a beginner.\u00a0\u21a9</p> </li> </ol>"},{"location":"vim/index.html","title":"Index","text":""},{"location":"vim/index.html#vim","title":"Vim","text":"<ul> <li>The Philosophy of Vim</li> <li>Setting up Vim for CS2030S</li> <li>Quick Lessons</li> <li>Vim Tips</li> <li>Color Scheme and Plugins</li> </ul>"},{"location":"vim/cheatsheet.html","title":"VIM Cheat Sheets","text":""},{"location":"vim/cheatsheet.html#cursor-movement","title":"Cursor Movement","text":"<p>In <code>NORMAL</code> mode.</p> Keys Description H \u00a0\u00a0 (or Left) Move cursor to the left (you may use arrow keys if <code>.vimrc</code> is set correctly) J \u00a0\u00a0 (or Down) Move cursor down (you may use arrow keys if <code>.vimrc</code> is set correctly) K \u00a0\u00a0 (or Up) Move cursor up (you may use arrow keys if <code>.vimrc</code> is set correctly) L \u00a0\u00a0 (or Right) Move cursor to the right (you may use arrow keys if <code>.vimrc</code> is set correctly) <code>n</code> H \u00a0\u00a0 (or <code>n</code> Left) Move cursor <code>n</code> steps to the left (you may use arrow keys if <code>.vimrc</code> is set correctly) <code>n</code> J \u00a0\u00a0 (or <code>n</code> Down) Move cursor <code>n</code> steps down (you may use arrow keys if <code>.vimrc</code> is set correctly) <code>n</code> K \u00a0\u00a0 (or <code>n</code> Up) Move cursor <code>n</code> steps up (you may use arrow keys if <code>.vimrc</code> is set correctly) <code>n</code> L \u00a0\u00a0 (or <code>n</code> Right) Move cursor <code>n</code> steps to the right (you may use arrow keys if <code>.vimrc</code> is set correctly) G G Go to the first line Shift + G Go to the last line } Jump to next paragraph { Jump to previous paragraph : <code>n</code> Go to line number <code>n</code>"},{"location":"vim/cheatsheet.html#edit","title":"Edit","text":"<p>In <code>NORMAL</code> mode.</p> Commands Description <code>:e</code> Edit file (i.e., open) <code>:w</code> Write file (i.e., save) <code>:q</code> Quit file (only works if file is unchanged) <code>:q!</code> Force quit (even if file is changed) <code>:wq</code> Write file and quit Keys Description Y Y Yank (i.e., copy) a line D D Delete (i.e., copy) a line P Paste after cursor Shift + P Paste before cursor U Undo Ctrl + R Redo = Auto-indent current line <code>n</code> Y Y Yank (i.e., copy) <code>n</code> lines <code>n</code> D D Delete (i.e., copy) <code>n</code> lines <code>n</code> = = Auto-indent <code>n</code> lines G G = Shift + G Auto-indent all lines <p>The last keys can be split into 3 components:</p> <ol> <li>G G: Go to the first line</li> <li>=: Auto-indent</li> <li>Shift + G: Go to the last line</li> </ol> <p>This reads as (1.) go to the first line, then (2.) auto-indent (3.) until the last line.</p>"},{"location":"vim/cheatsheet.html#search-and-replace","title":"Search and Replace","text":"<p>In <code>NORMAL</code> mode.</p> Commands Description <code>/&lt;pattern&gt;</code> Search for <code>&lt;pattern&gt;</code> <code>?&lt;pattern&gt;</code> Search backward for <code>&lt;pattern&gt;</code> <code>:%s/&lt;old&gt;/&lt;new&gt;/gc</code> Replace all <code>&lt;old&gt;</code> with <code>&lt;new&gt;</code> (this will prompt options) <code>:&lt;sn&gt;,&lt;en&gt;s/&lt;old&gt;/&lt;new&gt;/gc</code> Replace all <code>&lt;old&gt;</code> with <code>&lt;new&gt;</code> in the given line range from <code>&lt;sn&gt;</code> to <code>&lt;en&gt;</code> (this will prompt options) <p>Once a search is performed.</p> Keys Description N Continue search forward Shift + N Continue search backward <p>Options for replace</p> Option Description <code>y</code> Yes, replace the current one <code>n</code> No, skip this one <code>a</code> Yes to all <code>l</code> Yes to just this one <code>q</code> Quit"},{"location":"vim/cheatsheet.html#comment-and-uncomment","title":"Comment and Uncomment","text":"<p>We can quickly comment on a specific range of lines using the replace functionality.  The idea is to replace the beginning of a line with <code>//</code> (i.e., to start a single-line comment).  We need to \"escape\" the <code>/</code> character by writing it as <code>\\/\\/</code>To match the beginning of the line, the character is <code>^</code>.</p> <p>Comment out Lines 4 to 17.</p> <pre><code>:4,17s/^/\\/\\//gc\n</code></pre> <p>We can also quickly uncomment a specific range of lines by replacing <code>//</code> with nothing.</p> <p>Uncomment Lines 4 to 17.</p> <pre><code>:4,17s/\\/\\///gc\n</code></pre> <p>Simply replace <code>4</code> and <code>17</code> with the range that you need.</p>"},{"location":"vim/cheatsheet.html#split-screen","title":"Split Screen","text":""},{"location":"vim/cheatsheet.html#commands","title":"Commands","text":"Keys Description <code>:sp &lt;filename&gt;</code> Open file name <code>&lt;filename&gt;</code> in horizontal split screen <code>:vsp &lt;filename&gt;</code> Open file name <code>&lt;filename&gt;</code> in vertical split screen <code>:e &lt;filename&gt;</code> Open the file name <code>&lt;filename&gt;</code> in the current screen"},{"location":"vim/cheatsheet.html#navigation","title":"Navigation","text":"Keys Description Ctrl + W Ctrl + W Change screen Ctrl + W H Change to the right screen Ctrl + W J Change to the down screen Ctrl + W K Change to the up screen Ctrl + W L Change to the left screen"},{"location":"vim/cheatsheet.html#java","title":"Java","text":"Keys Description <code>:!javac &lt;filename&gt;.java</code> Compile the java file <code>&lt;filename&gt;.java</code> <code>:!java &lt;classname&gt;</code> Run the class <code>&lt;classname&gt;</code> <code>:!jshell &lt;filename&gt; &lt;filename&gt; ...</code> Start JShell with the given <code>&lt;filename&gt;</code>s"},{"location":"vim/philosophy.html","title":"The Philosophy of <code>vim</code>","text":"<p>This article is adapted from the notes of the Unix@Home Workshop  held in August 2020.</p> <p>Learning Objectives</p> <p>Students should</p> <ul> <li>appreciate the usefulness of learning <code>vim</code> and using it as the main source code editor.</li> <li>appreciate the efficiency and philosophy of using <code>vim</code>.</li> <li>have experience navigating around a text buffer and manipulating text in <code>vim</code></li> <li>be aware of how to learn more about using <code>vim</code>.</li> </ul>"},{"location":"vim/philosophy.html#background","title":"Background","text":"<p>To edit our code, we need a proper editor.  Remember that, ideally, we want to keep our hands on the keyboard and keep ourselves \"in the zone\" with only the terminal, the keyboard, and ourselves, so we will use a terminal-based editor: no windows, no mouse, no arrow keys, no function keys.</p> <p>There are only two respectable, widely available text editors in Unix -- <code>vim</code> and <code>emacs</code>.  Which one is better has been an ongoing religious war, but for us in SoC, we use <code>vim</code>.</p> <p>Reading Keyboard Keys</p> <p>Keyboard keys are enclosed in a box like the following letter A.  All keyboard keys are written in uppercase.  You are to press exactly that key without any other key.  So the letter A should give you the lowercase \"a\" character.</p> <p>If a sequence of keys is to be pressed, you will see the keys in successions.  For instance, if you see G G, it means you should press G twice.</p> <p>On the other hand, if multiple keys are to be pressed at the same time, you will see a plus sign (i.e., +) written in between the keys.  For instance, if you see Shift+Z+Z, it means you should press Shift key and Z at the same time.  Since we cannot press two different Z at the same time, the second Z is pressed after your finger has been moved from the first Z.  However, you should still be pressing the Shift key.</p> <p>If the intention is for the Shift key to not be pressed for the second Z, it will be written as Shift+Z Z.</p>"},{"location":"vim/philosophy.html#basic-of-vim","title":"Basic of <code>vim</code>","text":""},{"location":"vim/philosophy.html#minimizing-hand-movements","title":"Minimizing Hand Movements","text":"<p><code>vim</code>, like the shell, aims to minimize hand movements.  Frequently used commands are positioned in convenient places on the keyboard.  Let me give you a few examples.</p> <ul> <li> <p>To exit vim, type Shift+Z+Z.  Notice that this is located in the bottom left corner of your keyboard.  For normal typing, your left hand is supposed to be placed over the keys A S D F, so you just need to move slightly your left pinky to Shift and left ring finger to Z and hit them.</p> </li> <li> <p>To move the cursor, instead of using the arrow keys, <code>vim</code> uses H to move left, L to move right, J to move down, and K to move up.  For normal typing, your right hand is supposed to be placed on J K L ;, so these arrow key alternatives are located very near to where your right hand should be!</p> </li> </ul> <p>I have a few more things to say about using H J K L to replace the arrow keys:</p> <ul> <li> <p>It is not uncommon for applications to re-map other keys for movement.  Many first-person shooting games use W A S D for movement, for the same reason as <code>vim</code> -- it is close to the resting position of the left hand on the keyboard.</p> </li> <li> <p>The use of H J K L for movement is more ubiquitous than you think.  In the Web version of Gmail, Facebook, and Reddit, for instance, you could use J and K to move up and down across posts.</p> </li> </ul>"},{"location":"vim/philosophy.html#multi-modal-editor","title":"Multi-modal Editor","text":"<p><code>vim</code> is a multi-modal editor.  While most other editors make no distinction between reading and editing, <code>vim</code> makes an explicit distinction between the two.  <code>vim</code> has two basic modes:</p> <ul> <li><code>NORMAL</code> mode: where you read, navigate and manipulate the text.</li> <li><code>INSERT</code> mode: where you insert the text</li> </ul> <p>As a programmer, having a separate <code>NORMAL</code> mode makes sense since we spend much time reading and navigating around source code.  Thus, allowing the editing commands to be optimized.</p> <p>In the <code>NORMAL</code> mode, you can use any of these keys I S A O (with or without Shift) to switch to <code>INSERT</code> mode.  To go back to <code>NORMAL</code> mode, press Esc.  The keys I S A O have different meanings, which you will learn later.</p> <p>Note that most of the time you will be in <code>NORMAL</code> mode.  So a habitual <code>vim</code> user would insert some text and immediately switch back to normal mode by hitting Esc.</p>"},{"location":"vim/philosophy.html#tell-vim-what-you-want-to-do-dont-do-it-yourself","title":"Tell <code>vim</code> What You Want To Do; Don't Do It Yourself","text":"<p>In <code>NORMAL</code> mode, you can manipulate text in <code>vim</code> by issuing commands to <code>vim</code>.  These commands are like a programming language.  It is also not unlike the Unix commands, in that each command does a small thing but can be composed together to perform complex text manipulation.</p> <p>Let me give an example here.  Suppose you have a sentence:</p> <pre><code>Wherever there is light, there is also a shadow.\n</code></pre> <p>You want to remove <code>also a</code> from the sentence.</p> <p>What would you do in a typical text editor?  You move your hand away from the keyboard, find your mouse, move your mouse cursor to highlight the text, and then hit Del.  Or you could move the cursor (by mouse or by repeatedly hitting the keyboard) to place the cursor after <code>a</code>, and then press Del six times.</p> <p>In addition to being tedious, this is error-prone.  You might highlight one additional or one less space, or hit Del one too many times.</p> <p>What we are used to doing is performing the action of deleting the words ourselves.  For <code>vim</code>, we do it differently.  We need to look for the word <code>also</code> and delete two words.  This translates to the command / A L S O Enter D 2 W.</p> <ul> <li>/ triggers a search.  This is an almost universal command -- try / on Facebook (web) or on this page.</li> <li>A L S O Enter tells <code>vim</code> what you want to search. After pressing Enter, your cursor should be placed at the beginning of <code>also</code>.</li> <li>D 2 W tell <code>vim</code> to \"delete two words\".</li> </ul> <p>Instead of worrying about the actual actions to perform the deletion, we issue higher-level commands to describe what we want to do.  This is powerful since this is how our brain thinks -- \"I need to insert this here, change this word to that, remove two lines, etc.\"  All these maps into commands in <code>vim</code>.  As a result, once you master <code>vim</code> basics, you can type as fast as you think<sup>1</sup>!</p> <p>A common pattern for <code>vim</code> command consists of three parts:</p> <ol> <li>Place the cursor.</li> <li>Perform an action.</li> <li>Move to the new placement of the cursor.</li> </ol> <p>In the example above, / A L S O Enter places the cursor, D is the action (delete), and 2 W is the movement (move the cursor forward by two words).</p> <p>Another common command that students use is G G = Shift+G.  This command is used to indent the source code in the current file.  G G is the command to place the cursor at the top of the file.  = is the action (indent), and Shift+G is the command to place the cursor on the last line of the file.</p>"},{"location":"vim/philosophy.html#be-a-good-unix-citizen","title":"Be A Good Unix Citizen","text":"<p>Not only do the basic commands <code>vim</code> adhere to the Unix principles of composability, <code>vim</code> plays well with Unix shells, which adds additional power to <code>vim</code>.  For instance, if you want to have the standard output from a command paste into the file you are editing, you can run:</p> <pre><code>:r! &lt;command&gt;\n</code></pre> <p>: triggers the <code>vim</code> command line.  R asks <code>vim</code> to read something and paste it into the current cursor location.  At this point, you can pass in, for instance, another file name.  But here, we enter !, which tells <code>vim</code> to run a shell.  We then pass the <code>command</code> to the shell.  Whatever the command writes to the standard output, will be read and inserted into <code>vim</code>.</p> <p>Want to insert today's date?</p> <pre><code>:r! date\n</code></pre> <p>Want to insert a mini calendar?</p> <pre><code>:r! cal\n</code></pre> <p>Want to insert the list of all JPG pictures?</p> <pre><code>:r! ls *jpg\n</code></pre> <p>You can even pass a chunk of text from <code>vim</code> to the standard input of another program, and replace it with what is printed to the standard output by that program.</p>"},{"location":"vim/philosophy.html#other-reasons-to-learn-vim","title":"Other Reasons To Learn <code>vim</code>","text":"<p>Besides enabling you to type as fast as you think with as few hand movements as possible, there are other reasons to use <code>vim</code>:</p> <ul> <li> <p><code>vim</code> is installed by default in almost any Unix environment.  Imagine if you get called to a client-side to debug a Linux server, and you need to edit something -- you can rest assured that <code>vim</code> is there.</p> </li> <li> <p><code>vim</code> is the only source code editor you need to learn and master.  It works for almost any programming language.  If you use IDE, you have to learn IntelliJ for Java, IDLE for Python, Visual Studio C++ for C++, etc.  This reason is also why VS Code has gained significant popularity in recent years.</p> </li> <li> <p><code>vim</code> is extensible and programmable.  It has been around for almost 30 years, and tons of plugins have been written.  Whatever feature you need, there is likely a native <code>vim</code> command or a <code>vim</code> plugin for that.</p> </li> </ul> <p>The only downside to using <code>vim</code> is that it is terminal-based (some consider it ugly) and it has a steep learning curve.  But, in our experience, students will build up their muscle memory and are comfortable with <code>vim</code> after 2-3 weeks of usage.</p> <p>For CS2030S, there is another practical reason to learn and gain familiarity with <code>vim</code>.  The practical exams are conducted in a sandboxed environment, which you can only access through <code>ssh</code> via a terminal.  You only have a few choices (<code>emacs</code>, <code>micro</code>, <code>vim</code>) and <code>vim</code> is the only reasonable choice. </p> <ol> <li> <p>The book Practical Vim by Drew Neil has the subtitle \"Edit text at the speed of thought\".\u00a0\u21a9</p> </li> </ol>"},{"location":"vim/plugins.html","title":"Vim Extensions on PE Hosts","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>understand plugins and color schemes.</li> </ul>"},{"location":"vim/plugins.html#background","title":"Background","text":"<p>CS2030S provides a minimal set of vim extensions (i.e., plugins and color schemes) officially.  At the beginning of the semester, students can install the same set of extensions following the vim setup procedure.  The same set of official extensions will be made available during the practical exams.</p> <p>Students are free to install any additional color schemes or plugins if they wish.  These additional extensions, however, are not allowed and will not be available during the practical exams.</p> <p>The following are the officially supported vim extensions in CS2030S.</p>"},{"location":"vim/plugins.html#color-schemes","title":"Color Schemes","text":"<p>We installed three color schemes <code>~cs2030s/.vim/colors</code>.</p> <p>The three color schemes are:</p> <ul> <li>gruvbox</li> <li>molokai</li> <li>onedark</li> </ul> <p>You can change your vim color scheme using the <code>:color</code> command.  For instance,</p> <pre><code>:color gruvbox\n</code></pre> <p>You can add the line <code>color gruvbox</code> (without <code>:</code>) to your <code>~/.vimrc</code> so that the color scheme is loaded at the start of every vim session.</p> <p>Some color schemes display differently depending on whether the background is set to <code>dark</code> or <code>light</code></p> <p>Some examples, with <code>set background=dark</code> in <code>~/.vimrc</code>:</p> <p>The Vim default color scheme:</p> <p></p> <p>The molokai (CS2030S default) color scheme:</p> <p></p> <p>The gruvbox color scheme </p> <p></p>"},{"location":"vim/plugins.html#plugins","title":"Plugins","text":"<p>We support the Airline plugin, which provides an informative status bar in vim.</p>"},{"location":"vim/quick-lessons.html","title":"Quick <code>vim</code> Lessons","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>have a basic familiarity with <code>vim</code>.</li> </ul> <p>Here is a quick walkthrough to get a taste of <code>vim</code>.</p>"},{"location":"vim/quick-lessons.html#lesson-1-preparation","title":"Lesson 1: Preparation","text":""},{"location":"vim/quick-lessons.html#step-1-download","title":"Step 1: Download","text":"<p>Download the following file for practice using <code>vim</code> in this session.</p> <pre><code>$ cp ~cs2030s/jfk.txt .\n</code></pre> <p>The file named <code>jfk.txt</code> should be copied to your currentw orking directory.  You can check that the file is created by typing the following</p> <pre><code>$ ls\n</code></pre>"},{"location":"vim/quick-lessons.html#step-2-open","title":"Step 2: Open","text":"<p>Now let's start your first <code>vim</code> session.  Open <code>vim</code> and load the downloaded <code>jfk.txt</code> using the following command</p> <pre><code>$ vim jfk.txt\n</code></pre> <p></p>"},{"location":"vim/quick-lessons.html#lesson-2-navigation","title":"Lesson 2: Navigation","text":""},{"location":"vim/quick-lessons.html#step-1-moving","title":"Step 1: Moving","text":"<p>When you start, you will be in <code>NORMAL</code> mode.  Do not go into the <code>INSERT</code> mode yet.  Try the following exercise to get comfortable with the keys.</p> <ul> <li>Move the cursor around step-by-step backward (H), down (J), forward (K), and up (L).</li> <li>Move the cursor sentence-by-sentence forward ()) and backward (().</li> <li>Move the cursor paragraph-by-paragraph forward (}) and backward ({).</li> <li>Move the cursor page-by-page forward (Ctrl+F) and backward (Ctrl+B).</li> <li>Move the cursor to the beginning of the line with 0.</li> <li>Move the cursor to the end of the line with Shift+4 (i.e., <code>$</code>).</li> <li>Move the cursor to the beginning of the file with G G.</li> <li>Move the cursor to the end of the file with Shift+G (i.e., <code>G</code>).</li> </ul>"},{"location":"vim/quick-lessons.html#step-2-searching","title":"Step 2: Searching","text":"<p>Now try the following steps in <code>NORMAL</code> mode:</p> <ol> <li>Press /.</li> <li>Type in any word (or prefix of a word), we recommend the word <code>the</code>.</li> <li>Press Enter.</li> </ol> <p>After step 2, you should see the following with your command highlighted in a red box.</p> <p></p> <p>This should move the cursor to the beginning of the word.  You can use N and Shift+N to move to the next match and the previous match.</p> <p>When you are comfortable moving around, you can type Shift+Z+Z to exit.</p> <p>Congratulations, you have just completed your first session in <code>vim</code>!</p>"},{"location":"vim/quick-lessons.html#lesson-3-manipulating-text","title":"Lesson 3: Manipulating Text","text":"<p>Now, we are going to open up the same file again and try to manipulate the text.  We are going to stay in the <code>NORMAL</code> mode still.</p> <pre><code>$ vim jfk.txt\n</code></pre>"},{"location":"vim/quick-lessons.html#step-1-deletion","title":"Step 1: Deletion","text":"<p>Deletion is closer to cut.  The deleted characters are stored in a clipboard.  Try the following:</p> <ul> <li>Press 0 D 3 W to move the cursor to the beginning of the line and delete three words.</li> <li>Press U to undo.  This is another lifesaver that you should remember.</li> </ul> <p>In <code>vim</code>, repeating the same command twice usually means applying it to the whole line.  Pairing a command with Shift (or the capital letter version) usually means applying the action until the end of the line.  </p> <ul> <li>Press D D to delete the current line.</li> <li>Press Shift+D to delete from the current cursor until the end of the line.</li> </ul>"},{"location":"vim/quick-lessons.html#step-2-copy-pasting","title":"Step 2: Copy-Pasting","text":"<p>Pasting recovers what was stored in the clipboard.  Try the following:</p> <ul> <li>Press P to paste back what you just deleted.</li> <li>Move the cursor to somewhere else.</li> <li>Press P to paste again.</li> </ul> <p>We can also copy instead of cut (or delete and put into the clipboard).</p> <ul> <li>Press Y Y to copy (or yank) the current line.</li> <li>Move the cursor to somewhere else.</li> <li>Press P to paste the copied line.</li> </ul> <p>Remember that all these commands can be composed using the movement-action-movement pattern.</p> <ul> <li>Press Shift+9 Y Shift+0 to<ul> <li>move to the beginning of the sentence: Shift+9 (i.e., {) </li> <li>copy (i.e., yank): Y</li> <li>until the end of the sentence: Shift+0 (i.e., })</li> </ul> </li> </ul> <p>As you have seen in the D 2 W example, you can precede an action with a number to repeat an action multiple times.</p> <ul> <li>Press Y Y 9 P.<ul> <li>You should be able to understand what just happened!</li> </ul> </li> </ul>"},{"location":"vim/quick-lessons.html#step-3-deleting-a-character","title":"Step 3: Deleting a Character","text":"<p>The X command deletes the current character.</p> <p>Try this exercise: At the end of the file <code>jfk.txt</code>, there are some typos:</p> <pre><code>libertyi. liberty.\n</code></pre> <p>Change <code>libertyi. liberty.</code> to <code>libtery.</code> by positioning the cursor on the second <code>i</code> and deleting it.  Then use Shift+D to delete the extra <code>liberty.</code> at the end of the sentence.</p>"},{"location":"vim/quick-lessons.html#step-4-visual-mode","title":"Step 4: Visual Mode","text":"<p>In addition to the <code>INSERT</code> and <code>NORMAL</code> modes, <code>vim</code> has a third mode, the <code>VISUAL</code> mode.  You can enter the <code>VISUAL</code> mode by hitting V.  Once in visual mode, you can move your cursor to select the text and perform some actions on it (e.g., D or X to delete, Y to yank).</p> <p>Hitting Shift+V will allow you to select line-by-line.</p> <p>The <code>VISUAL</code> mode allows us to pipe the selected text to another Unix command, and replace it with the result of that command.</p> <p>Go ahead and try the following:</p> <ol> <li>Select a paragraph in <code>jfk.txt</code>.</li> <li>Press :.</li> </ol> <p>You will see that</p> <pre><code>:'&lt;,'&gt;\n</code></pre> <p>appears in the last line of the terminal.  At this point, you can type in actions that you want to perform on the selected text.  For instance,</p> <pre><code>:'&lt;,'&gt;w john.txt\n</code></pre> <p>will write it to a file named <code>john.txt</code>.</p> <p>But, let's try the following:</p> <pre><code>:'&lt;,'&gt;!fmt\n</code></pre> <p><code>!fmt</code> tells <code>vim</code> to invoke the shell and run <code>fmt</code>.  <code>fmt</code> is another simple small Unix utility that takes in a text (from standard input) and spews out formatted text in the standard output.  You will see that the width of the text has changed to the default of 65.</p> <p>You can try something that we have seen before.  Select the text again, and hit</p> <pre><code>:'&lt;,'&gt;!wc\n</code></pre> <p>The selected text will be replaced with the output from <code>wc</code>.</p>"},{"location":"vim/quick-lessons.html#step-5-the-command","title":"Step 5: The <code>:</code> command","text":"<p>You have seen examples of <code>:</code> commands for writing to a file or piping selected text to an external command.</p> <p>The <code>:</code> command also enables many actions that you can do in <code>vim</code>.  Here are a few essential yet simple commands.</p> <ul> <li>To jump to a line, hit : followed by the line number.</li> <li>To open another file, hit : and then type in <code>e &lt;filename&gt;</code></li> <li>To find help on a topic, hit : and then type in <code>help &lt;keyword&gt;</code></li> </ul> <p>Other advanced features such as search-and-replace, changing preferences, splitting windows, and opening new tabs, are also accessible from the <code>:</code> command.</p> <p>The <code>:</code> command prompt supports Ctrl+P and Ctrl+N for navigating back and forth your command history, just like <code>bash</code>.  It also supports Tab for auto-completion.</p>"},{"location":"vim/quick-lessons.html#lesson-3-insert-mode","title":"Lesson 3: Insert mode!","text":"<p>Finally, we are going to try inserting some text.  Remember, to use <code>INSERT</code> mode, we always start with the command I A O or S (may pair with Shift) followed by the text that you want to insert, followed by Esc.</p>"},{"location":"vim/quick-lessons.html#step-1-insert","title":"Step 1: Insert","text":"<p>Let's try I (insert).</p> <ol> <li>Place your cursor anywhere.</li> <li>Press I to go into <code>INSERT</code> mode</li> <li>Start typing.</li> <li>When you are done, press Esc.</li> </ol> <p>You just added some text to the file.</p>"},{"location":"vim/quick-lessons.html#step-2-append","title":"Step 2: Append","text":"<p>Now let's try A (append).</p> <ol> <li>Place your cursor anywhere.</li> <li>Press A.</li> <li>Start typing.</li> <li>When you are done, press Esc.</li> </ol> <p>A appends the text to the end of the current line.</p>"},{"location":"vim/quick-lessons.html#step-3-open","title":"Step 3: Open","text":"<p>Now let's try O (open).</p> <ol> <li>Place your cursor anywhere.</li> <li>Press O.</li> <li>Start typing.</li> <li>When you are done, press Esc.</li> </ol> <p>O opens up a new line for your text.</p>"},{"location":"vim/quick-lessons.html#step-4-substitute","title":"Step 4: Substitute","text":"<p>Now let's try O (open).</p> <ol> <li>Place your cursor anywhere.</li> <li>Press S.</li> <li>Start typing.</li> <li>When you are done, press Esc.</li> </ol> <p>S substitute the current character with your text.</p>"},{"location":"vim/quick-lessons.html#step-5-shift","title":"Step 5: Shift","text":"<p>Now try it with Shift and see the difference in behavior.</p>"},{"location":"vim/quick-lessons.html#learning-more","title":"Learning More","text":"<p>You can run <code>vimtutor</code> to learn more about <code>vim</code>.</p> <p>You can also check out the tips that we have collected for CS1010 or watch the various tutorials online.  </p> <p>Here are some useful resources on <code>vim</code>:</p> <ul> <li>Learn vim Progressively.</li> <li>Vim: Precision Editing at the Speed of Thought: A talk by Drew Neil</li> <li>Vim Adventure: An adventure game for learning <code>vim</code></li> <li>Vim Casts: Videos and articles for teaching <code>vim</code></li> <li>Vim Video Tutorials by Derek Wyatt</li> <li>Vim Awesome: Directory of plugins.</li> </ul>"},{"location":"vim/setup.html","title":"Setting Up <code>vim</code> on PE Hosts","text":"<p>Learning Objectives</p> <p>Students should</p> <ul> <li>have <code>vim</code> installed on their account on PE nodes.</li> </ul>"},{"location":"vim/setup.html#vim-configuration","title":"<code>vim</code> Configuration","text":"<p>Like many other Unix programs, you can configure your preferences by creating an <code>rc</code> (run commands) file in your home directory.  These <code>rc</code> files will be read by the corresponding programs and executed line-by-line as if the text is entered into the program through a keyboard.  You can view an <code>rc</code> file as a script that will be executed automatically whenever a program starts.</p> <p>For <code>vim</code>, the <code>rc</code> file is called <code>.vimrc</code>.  The dot (i.e., <code>.</code>) in the front of the file name carries a special meaning in Unix.  It means that this file is hidden -- you won't see it when you <code>ls</code>.  Hiding the run command files prevent your home directory from being cluttered.  To tell <code>ls</code> to show the hidden files, use the <code>-a</code> flag</p> <pre><code>$ ls -a\n</code></pre> <p>We have created a <code>.vimrc</code> file, with CS2030S defaults, for your use.  This is the basis upon which you can build your own configuration. </p> <p>To copy this file to your home directory on the PE nodes,</p> <pre><code>$ cp ~cs2030s/.vimrc ~\n</code></pre> <p>You can ask <code>vim</code> to automatically back up the files that you edit.  This has been a lifesaver for me on multiple occasions.</p> <p>The default <code>.vimrc</code> contains the following two lines:</p> <pre><code>set backup\nset backupdir=~/.backup\n</code></pre> <p>This causes <code>vim</code> to save the previous version of every file you edited in a backup directory at location <code>~/.backup</code>.  You need to create this directory, however, by</p> <pre><code>$ mkdir -p ~/.backup\n</code></pre> <p>Now, if you made changes to a file that you regretted, or if you accidentally deleted a file, you can check under <code>~/.backup</code> to see if the backup can save you.</p>"},{"location":"vim/setup.html#recovering-from-backup","title":"Recovering from Backup","text":"<p>To recover the file from the backup folder, you can copy the file using</p> <pre><code>$ cp ~/.backup/&lt;filename&gt; &lt;destination&gt;/&lt;filename&gt;\n</code></pre>"},{"location":"vim/setup.html#vim-plugins","title":"<code>vim</code> Plugins","text":"<p>CS2030S provides a minimal set of <code>vim</code> extensions by default for your labs and practical exams.  See the article on <code>vim</code> plugins for details.  </p> <p>Additional <code>vim</code> extensions are installed under <code>~/.vim</code>.  To install these \"official\" CS2030S <code>vim</code> extensions, you can copy the <code>.vim</code> from cs2030s's home directory to your home directory.  On the PE host, run:</p> <pre><code>mkdir -p ~/.vim\ncp -r ~cs2030s/.vim/* ~/.vim\n</code></pre> <p>You can test out the different color schemes according to the instructions to check if you have set up the plugins correctly.  The default CS2030S <code>.vimrc</code> uses the <code>molokai</code> color schemes.</p>"},{"location":"vim/tips.html","title":"Vim Tips","text":"<p>I collected some tips on <code>vim</code> that I find helpful for students. </p> <p>Prerequisite</p> <p>You have gone through the basic quick lessons and have set up your vim in your PE account.</p> <p>Learning Objectives</p> <p>Students should</p> <ul> <li>be able to compare files (e.g., input/output matching for correctness).</li> <li>be able to recover from <code>.swp</code> file in <code>vim</code>.</li> </ul>"},{"location":"vim/tips.html#1-useful-configuration","title":"1. Useful Configuration","text":""},{"location":"vim/tips.html#showing-line-numbers","title":"Showing Line Numbers","text":"<p>If you prefer to show the line number on every line in <code>vim</code>, add</p> <pre><code>set number\n</code></pre> <p>to your <code>~/.vimrc</code>.</p>"},{"location":"vim/tips.html#2-navigation","title":"2. Navigation","text":""},{"location":"vim/tips.html#faster-navigation","title":"Faster Navigation","text":"<p>If you find yourselves typing too many HJKL to navigate around your code, check out the following shortcuts to navigate around:</p> <p>To move word-by-word:</p> <ul> <li>W jump to the beginning of the next word</li> <li>B ump to the beginning of the previous word (reverse of <code>w</code>)</li> <li>E jump to the end of the word (or next word when pressed again)</li> </ul> <p>To search:</p> <ul> <li>F char: search forward in the line and sit on the next matching char</li> <li>T char:  search forward in the line and sit on one space before the matching char</li> </ul> <p>0 would move you to the beginning of the line, but when coding, it is sometimes useful to jump to the first non-blank character instead.  To do so, use Shift+6 (i.e., <code>^</code>).</p> <p>In coding, we have many pairs of <code>[]</code>, <code>{}</code>, <code>()</code> and <code>&lt;&gt;</code>.  You can use Shift+5 (i.e., <code>%</code>) jump between matching parentheses.</p>"},{"location":"vim/tips.html#jump-to-a-line","title":"Jump to a Line","text":"<p>If the compiler tells you there is an error on Line \\(x\\), you can issue <code>:&lt;x&gt;</code> to jump to Line \\(x\\).  For instance, <code>:40</code> will go to Line 40.</p>"},{"location":"vim/tips.html#3-editing-operations","title":"3. Editing Operations","text":""},{"location":"vim/tips.html#undo-and-redo","title":"Undo and Redo","text":"<p>Since we are on the topic of correcting mistakes, U in command mode undo your changes.  Prefix it with a number \\(n\\) to undo \\(n\\) times.  If you want to undo your undo, Ctrl+R will redo.</p>"},{"location":"vim/tips.html#navigation-editing","title":"Navigation + Editing","text":"<p><code>vim</code> is powerful because you can combine operations with navigation.  For instance C to change, D to delete, Y to yank (copy).  Since W is the navigation command to move over the current word, combining them we get:</p> <ul> <li>CW change the current word (delete the current word and enter insert mode)</li> <li>DW delete the current word</li> <li>YW yank the current word (copy word into buffer)</li> </ul> <p>Can you guess what each of these does:</p> <ul> <li>DFShift+0 </li> <li>DFShift+0 </li> <li>CShift+4</li> <li>Y0</li> </ul> <p>If you repeat the operation C, D, and Y, it applies to the whole line, so:</p> <ul> <li>CC change the whole line</li> <li>DD delete the whole line</li> <li>YY yank the whole line</li> </ul> <p>You can add a number before an operation to specify how many times you want to repeat an operation.  So 5DD  deletes 5 lines, 5DW deletes 5 words, etc.</p> <p>See the article Operator, the True Power of <code>Vim</code> for more details.</p>"},{"location":"vim/tips.html#swapping-lines","title":"Swapping Lines","text":"<p>Sometimes you want to swap the order of two lines of code, in command mode, DDP will do the trick.  DD deletes the current line, P paste it after the current line, in effect swapping the order of the two lines.</p>"},{"location":"vim/tips.html#commenting-blocks-of-code","title":"Commenting blocks of code","text":"<p>Sometimes we need to comment out a whole block of code in C for testing purposes. There are several ways to do it in <code>vim</code>:</p> <ul> <li>Place the cursor on the first line of the block of code you want to comment on.</li> <li>0 to jump to the beginning of the line</li> <li>Shift+V enter visual mode</li> <li>Use the arrow key to select the block of code you want to comment on.</li> <li>Shift+I to insert at the beginning of the line (here, since we already selected the block, we will insert at the beginning of every selected)</li> <li>// to insert the C comment character (you will see it inserted in the current line, but don't worry)</li> <li>Esc to escape from the visual code.</li> </ul> <p>To uncomment,</p> <ul> <li>Place the cursor on the first line of the block of code you want to comment.</li> <li>0 to jump to the beginning of the line</li> <li>Ctrl+V enter block visual mode</li> <li>Use the arrow key to select the columns of text containing <code>//</code></li> <li>X to delete them</li> </ul>"},{"location":"vim/tips.html#4-other-useful-commands","title":"4. Other Useful Commands","text":""},{"location":"vim/tips.html#search-and-replace-in-vim","title":"Search and Replace in <code>vim</code>","text":"<pre><code>:%s/oldWord/newWord/gc\n</code></pre> <p><code>:</code> enters the command mode.  <code>%</code> means apply to the whole document, <code>s</code> means substitute, <code>g</code> means global (otherwise, only the first occurrence of each line is replaced). <code>c</code> is optional -- adding it cause <code>vim</code> to confirm with you before each replacement  </p>"},{"location":"vim/tips.html#shell-command","title":"Shell Command","text":"<p>If you need to issue a shell command quickly, you don't have to exit <code>vim</code>, run the command, and launch <code>vim</code> again.  You can use <code>!</code>,</p> <pre><code>:!&lt;command&gt;\n</code></pre> <p>will issue the command to shell.  E.g.,</p> <pre><code>:!ls\n</code></pre> <p>You can use this to compile your current file, without exiting <code>vim</code>.</p> <pre><code>:!make\n</code></pre> <p><code>make</code> is a builtin command for <code>vim</code>, so you can also simply run</p> <pre><code>:make\n</code></pre>"},{"location":"vim/tips.html#terminal","title":"Terminal","text":"<p>You can open an interactive shell from within <code>vim</code> with:</p> <pre><code>:terminal\n</code></pre> <p>This command splits the window and add a terminal, within which you can compile or run your code.</p>"},{"location":"vim/tips.html#abbreviation","title":"Abbreviation","text":"<p>You can use the command <code>ab</code> to abbreviate frequently typed commands.  E.g., in your <code>~/.vimrc</code>,</p> <pre><code>ab sop System.out.println\n</code></pre> <p>Now, when you type <code>sop</code>, it will be expanded into <code>System.out.println</code></p>"},{"location":"vim/tips.html#auto-completion","title":"Auto-Completion","text":"<p>You can use Ctrl+P or Ctrl+N to auto-complete.  By default, the autocomplete dictionary is based on the text in your current editing buffers.  This is a very useful keystroke saver for long function names and variable names.</p>"},{"location":"vim/tips.html#auto-indent-the-whole-file","title":"Auto-Indent the Whole File","text":"<p>You can GG=Shift+G in command mode (i.e., type out <code>gg=G</code>) to auto-indent the whole file.  GG is the command to go to the beginning of the file.  = is the command to indent.  Shift+G is the command to go to the end of the file.</p>"},{"location":"vim/tips.html#split-vims-viewport","title":"Split <code>vim</code>'s Viewport","text":"<ul> <li><code>:sp file.c</code> splits the <code>vim</code> window horizontally</li> <li><code>:vsp file.c</code> splits the <code>vim</code> window vertically</li> <li>Ctrl+WCtrl+W moves between the different <code>vim</code> viewports</li> </ul> <p>Alternatively, run <code>vim -O file1 file2</code> to immediately open both files in two different viewpoints.</p>"},{"location":"vim/tips.html#compare-two-files","title":"Compare two files","text":"<p>You can compare two files with <code>vim</code>, using the <code>-d</code> flag.  For instance,</p> <p><code>vim -d file1 file2</code></p> <p>would open up two files for line-by-line comparison.  This is most useful if you want to compare the output of your program with the expected output.</p>"},{"location":"vim/tips.html#5-recovery-files","title":"5. Recovery Files","text":"<p>Vim automatically saves the files you are editing into temporary swap files, with the extension <code>.swp</code>.  These files are hidden, so you don't normally see them when you run <code>ls</code>.  (You need to run <code>ls -a</code> to view the hidden files)</p> <p>The swap files are useful if your editing session is disrupted before you save (e.g., the network is disconnected, you accidentally close the terminal, your OS crashes, etc).</p> <p>When you launch <code>vim</code> to edit a file, say, <code>foo.c</code>.  <code>vim</code> will check if a swap file <code>.foo.c.swp</code> exist.  If it does, <code>vim</code> with display the following</p> <pre><code>Found a swap file by the name \".foo.c.swp\"\n          owned by: elsa   dated: Sat Aug 21 15:01:04 2021\n         file name: ~elsa/foo.c\n          modified: no\n         user name: elsa   host name: pe116\n        process ID: 7863 (STILL RUNNING)\nWhile opening file \"foo.c\"\n             dated: Mon Jul 12 18:38:37 2021\n\n(1) Another program may be editing the same file.  If this is the case,\n    be careful not to end up with two different instances of the same\n    file when making changes.  Quit, or continue with caution.\n(2) An edit session for this file crashed.\n    If this is the case, use \":recover\" or \"vim -r a.c\"\n    to recover the changes (see \":help recovery\").\n    If you did this already, delete the swap file \".a.c.swp\"\n    to avoid this message.\n\nSwap file \".a.c.swp\" already exists!\n[O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort:\n</code></pre> <p>The messages above are self-explanatory.  Read it carefully.  Most of the time, you want to choose \"R\" to recover your edits, so that you can continue editing.  Remember to remove the file <code>.foo.c.swp</code> after you have recovered.  Otherwise, <code>vim</code> will prompt you the above messages every time you edit <code>foo.c</code>.</p> <p>Warning</p> <p>If <code>foo.c</code> is newer than the state saved in <code>.foo.c.swp</code>, and you recover from <code>.foo.c.swp</code>, you will revert to the state of the file as saved in the swap file.  This can happen if (i) you edit the file without recovery, or (ii) you recover the file, continue editing, but did not remove the <code>.foo.c.swp</code> file after.</p>"}]}